{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"resul",
				"results"
			],
			[
				"avg",
				"avg-time"
			],
			[
				"Mentio",
				"MentionFactory"
			],
			[
				"langu",
				"language"
			],
			[
				"lan",
				"language"
			],
			[
				"send",
				"send_time_to_semantria"
			],
			[
				"sent",
				"sent_to_semantria_timestamp"
			],
			[
				"add",
				"addmetric"
			],
			[
				"sema",
				"semantria_api_client"
			],
			[
				"semantr",
				"semantria_sentiment_detector"
			],
			[
				"Sem",
				"SemantriaSentimentDetector"
			],
			[
				"seman",
				"semantria_sentiment_detector"
			],
			[
				"proce",
				"processed_mentions"
			],
			[
				"resu",
				"results"
			],
			[
				"handler",
				"handlers"
			],
			[
				"handl",
				"handlers"
			],
			[
				"handle",
				"Handle"
			],
			[
				"Do",
				"DocsAutoResponse"
			],
			[
				"language",
				"languages"
			],
			[
				"langua",
				"languages"
			],
			[
				"_conn",
				"_connect"
			],
			[
				"SEMATRI",
				"SEMANTRIA_LANGUAGES"
			],
			[
				"Sema",
				"SemantriaApiClient"
			],
			[
				"sentim",
				"sentiment_polarity"
			],
			[
				"senti",
				"sentiment_polarity"
			],
			[
				"respo",
				"response"
			],
			[
				"api",
				"api_mock"
			],
			[
				"mozaic",
				"mozaic_backbone"
			],
			[
				"tr",
				"try	Try/Except"
			],
			[
				"Sta",
				"STATE_TYPES_CHOICES"
			],
			[
				"Job",
				"JobState"
			],
			[
				"file",
				"filepath"
			],
			[
				"COmma",
				"CommandError"
			],
			[
				"job",
				"job_state"
			],
			[
				"created",
				"created_by"
			],
			[
				"repo",
				"report"
			],
			[
				"emai",
				"email"
			],
			[
				"group",
				"group_id"
			],
			[
				"sleep",
				"sleep_timeout"
			],
			[
				"em",
				"email"
			],
			[
				"COmm",
				"CommandError"
			],
			[
				"debug",
				"debugger"
			],
			[
				"req",
				"requirejs"
			],
			[
				"main",
				"mainModules"
			],
			[
				"po",
				"post-bundle"
			],
			[
				"time",
				"timestamp"
			],
			[
				"core",
				"core_modules"
			],
			[
				"end",
				"ended_at"
			],
			[
				"app-",
				"app-build"
			],
			[
				"app",
				"app_folder"
			],
			[
				"statu",
				"status_code"
			],
			[
				"pop",
				"pop_misc"
			],
			[
				"Invi",
				"InvitePending"
			],
			[
				"stat",
				"status_code"
			],
			[
				"keyword",
				"keyword_id"
			],
			[
				"keywo",
				"keyword_name"
			],
			[
				"keyw",
				"keyword_name"
			],
			[
				"keywor",
				"keywordteam_id"
			],
			[
				"bofe",
				"before"
			],
			[
				"before",
				"beforeCommit"
			],
			[
				"grid",
				"gridList"
			],
			[
				"con",
				"container"
			],
			[
				"Board",
				"BOARD_WIDGET"
			],
			[
				"col",
				"collection"
			],
			[
				"full",
				"full_page"
			],
			[
				"widh",
				"width"
			],
			[
				"will",
				"will_be_killed"
			],
			[
				"list",
				"list_extra_params"
			],
			[
				"filte",
				"filtered_reports"
			],
			[
				"reports",
				"reports_params"
			],
			[
				"dump",
				"dumps	function"
			],
			[
				"Group",
				"GroupFactory"
			],
			[
				"home",
				"HOME_BOARD	import"
			],
			[
				"grou",
				"group_id"
			],
			[
				"display",
				"display_group_id"
			],
			[
				"Gro",
				"GroupFactory	import"
			],
			[
				"displa",
				"display_group_id	param"
			],
			[
				"page",
				"PAGE_WIDTH	import"
			],
			[
				"_",
				"_get_report_data	function"
			],
			[
				"resour",
				"resource_url	function"
			],
			[
				"subsc",
				"subscriptable"
			],
			[
				"readli",
				"readlines	function"
			],
			[
				"migr",
				"migration_number	forflow"
			],
			[
				"report",
				"report_factory	import"
			],
			[
				"key",
				"keyword_team	import"
			],
			[
				"Ke",
				"KeywordTeamFactory	class"
			],
			[
				"Rep",
				"ReportTemplateFactory	class"
			],
			[
				"cre",
				"create_report_template_with_sources_meta	import"
			],
			[
				"Repo",
				"ReportTemplateFactory"
			],
			[
				"vei",
				"ViewModes"
			],
			[
				"vi",
				"ViewModes"
			],
			[
				"Email",
				"EmailSubscriptionFactory"
			],
			[
				"Emai",
				"EmailSubscription"
			],
			[
				"laz",
				"LazyAttribute"
			],
			[
				"EmailS",
				"EmailSubscriptionFactory"
			],
			[
				"t",
				"type"
			],
			[
				"quack",
				"quackBehavior"
			],
			[
				"qua",
				"QuackBehavior"
			],
			[
				"fly",
				"flyBehavior"
			],
			[
				"view",
				"view_mode"
			],
			[
				"wid",
				"width"
			],
			[
				"max",
				"max_items_top"
			],
			[
				"mn",
				"min-height"
			],
			[
				"stas",
				"stash_message"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/alex/uberVU/thehole/docs/infrastructure/backend.md",
			"settings":
			{
				"buffer_size": 6998,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/docs/testing/run_backend_tests.md",
			"settings":
			{
				"buffer_size": 6835,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 3265 files for \"mongopool\"\n\n/Users/alex/uberVU/thehole/ubvushell.py:\n   26: from core.lib.mongodb.mongopool import MongoPool\n   93:     mongopool = MongoPool()\n   94:     timeline = MentionsTimeline(mongopool, ubvuconfig.options['mentions_timeline'])\n   96:     attribute_convertor = AttributeConverter(mongopool)\n  105:     mongospread = MongoSpread(mongopool)\n  108:     locationdetector = LocationDetector(mongopool)\n  112:     print '    Connected to mongopool & instantiated objects [%.2fs].' % duration\n\n/Users/alex/uberVU/thehole/aggregator/lib/aggregator_geolocation.py:\n   16:         self.geo_spread = GeoSpread(self.mongopool)\n\n/Users/alex/uberVU/thehole/aggregator/lib/flusher.py:\n  200:             self.mongopool[db][collection].update(finddict, updatedict,\n\n/Users/alex/uberVU/thehole/aggregator/scripts/base_migration_script.py:\n   50:         self.mongopool.set_timeout(None)\n   55:         self.stream_collection = self.mongopool.misc[collection_name]\n\n/Users/alex/uberVU/thehole/aggregator/scripts/check_migrated_counts.py:\n   43:         migrated_streams = self.mongopool.misc.migrate_geolocation_counts.find(\n   73:         migrated_streams = self.mongopool.misc.migrate_daily_language_counts.find(\n  103:         migrated_streams = self.mongopool.misc.migrate_sharing_counts.find(\n\n/Users/alex/uberVU/thehole/aggregator/scripts/fix_dynamo_analytics.py:\n   47:         self.mongopool.set_timeout(None)\n   51:         self.stream_collection = self.mongopool.misc.fix_dynamo_analytics\n\n/Users/alex/uberVU/thehole/aggregator/test/test_aggregator.py:\n  216:         self.mongopool.geolocation.flattn_attributes.remove()\n\n/Users/alex/uberVU/thehole/aggregator/test/test_flusher.py:\n   41:                     doc_count = self.mongopool[db][collection].find(doc).count()\n   45:                     mongo_doc = self.mongopool[db][collection].find_one(doc)\n\n/Users/alex/uberVU/thehole/analytics/lib/redo_counts.py:\n   71:                               self.mongopool.counts.counts))\n   73:                               self.mongopool.reach_counts.docs))\n   77:                                                 self.mongopool.day_counts.docs))\n   97:             db = self.mongopool.hour_counts._get_segment(find)\n  109:                          self.mongopool.fb_shares_counts.docs))\n  111:                          self.mongopool.fb_likes_counts.docs))\n  131:         for entry in self.mongopool.geolocation.docs.find(\n  134:             pairs.append((entry, self.mongopool.geolocation.docs))\n\n/Users/alex/uberVU/thehole/api/app/controllers/custom_sources.py:\n    7: from api.app.mongodb import mongopool\n   36:         results = mongopool.misc.client_sources.find(find_dict, suppress_fields)\n\n/Users/alex/uberVU/thehole/api/app/controllers/human_feedback.py:\n    9: from api.app.mongodb import mongopool\n   41:         mongopool.classifiers.feedback.insert(doc)\n   97:         mongopool.classifiers.houdini.insert(doc)\n\n/Users/alex/uberVU/thehole/api/app/controllers/sentiment.py:\n    5:                              mentions_timeline, mongospread, mongopool)\n   30:     mongopool.logs.sentiment.update({'_id': mention_id}, {'$set': update_dict},\n\n/Users/alex/uberVU/thehole/api/app/controllers/facebook/base.py:\n    3: from api.app.mongodb import mongopool\n   37:         cursor = mongopool.facebook[table].find(query)\n\n/Users/alex/uberVU/thehole/api/app/controllers/facebook/graphs.py:\n    5: from api.app.mongodb import mongopool\n   85:         for item in mongopool.facebook.insights.find(finddict):\n  131:         for item in mongopool.facebook[resource].find(finddict):\n\n/Users/alex/uberVU/thehole/api/app/controllers/facebook/graphs_sentiment.py:\n    1: from api.app.mongodb import mongopool\n   40:             for item in mongopool.facebook[resource].find(query):\n\n/Users/alex/uberVU/thehole/api/app/controllers/intelligence/test_results.py:\n    1: from api.app.mongodb import mongopool\n   55:         cursor = mongopool.classifiers.test_results.find(query, fields)\n\n/Users/alex/uberVU/thehole/api/app/controllers/twitter/followers.py:\n    9: from api.app.mongodb import mongopool\n   70:         return self._get_search_results(mongopool.twit.followers, finddict, exclude,\n\n/Users/alex/uberVU/thehole/api/app/controllers/twitter/from_author.py:\n    4: from api.app.mongodb import mongopool\n   49:         cursor = mongopool.twit.mentions.find(finddict, exclude) \\\n\n/Users/alex/uberVU/thehole/api/app/controllers/twitter/home_tweets.py:\n    1: from api.app.mongodb import mongopool\n   56:         return self._get_search_results(mongopool.ht.hometweets, finddict, exclude,\n\n/Users/alex/uberVU/thehole/api/app/controllers/twitter/mentions.py:\n   10: from api.app.mongodb import mongopool\n   84:         return self._get_search_results(mongopool.twit.mentions, finddict, exclude,\n  142:         for mention in mongopool.twit.mentions.find(finddict):\n\n/Users/alex/uberVU/thehole/api/app/controllers/twitter/user_tweets.py:\n    7: from api.app.mongodb import mongopool\n   75:         return self._get_search_results(mongopool.twit.usertweets, finddict, exclude,\n\n/Users/alex/uberVU/thehole/api/app/helpers/mentions_reduce.py:\n    1: from api.app.mongodb import mongopool, mentions_timeline\n   39:   cursor = mongopool.misc.tagged.find(query).limit(limit).max_scan(MAX_SCAN)\n\n/Users/alex/uberVU/thehole/api/app/mongodb/__init__.py:\n    2: from core.lib.mongodb.mongopool import MongoPool\n    6: # MongoPool\n    7: mongopool = None\n   22:   global mongopool, mongomisc, mongo_connection, mongotwit, mentions_timeline, mongospread\n   25:   mongopool = MongoPool(options['mongopool'], network_timeout=35)\n   27:     mongopool.testrun = True\n   29:   # Make some mongopool synonyms.\n   30:   mongo_connection = mongotwit = mongopool\n   33:   mongomisc = mongopool.misc\n   36:   mongospread = MongoSpread(mongopool)\n   39:   mentions_timeline = MentionsTimeline(mongopool, options['mentions_timeline'])\n   44:   attribute_converter = AttributeConverter(mongopool)\n\n/Users/alex/uberVU/thehole/api/lib/keywords_api.py:\n    6: from api.app.mongodb import mongomisc, mongopool\n  112:     mongopool.misc.tagged.remove(remove_tagged, just_one=False)\n  146:     mongopool.misc.feeds.update(finddict, update)\n  163:     mongopool.misc.client_sources.update(match_query, {'$set': updates},\n  182:     counts = mongopool.misc.client_sources.find(find_dict).count()\n  186:         platform = mongopool.misc.client_sources.find_one(find_dict)['platform']\n  200:     mongopool.misc.client_sources.remove(sources_dict)\n  217:     for item in mongopool.misc.client_sources.find(find_dict):\n  336:         mongopool.misc.client_keywords.update(find_dict, update_flags_dict)\n  540:     current_keyword = mongopool.misc.keywords.find_one({'keyword': keyword})\n\n/Users/alex/uberVU/thehole/api/lib/test_helper.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   16:         self.mongopool = MongoPool(uvconfig['mongopool'])\n   17:         self.attributesconverter = AttributeConverter(self.mongopool)\n   18:         self.timeline = MentionsTimeline(self.mongopool, uvconfig['mentions_timeline'])\n\n/Users/alex/uberVU/thehole/api/lib/counter/iteratingcounter.py:\n    4: from api.app.mongodb import mongopool, mentions_timeline\n   77:         cursor = (mongopool.misc.tagged.find(self.filters).\n\n/Users/alex/uberVU/thehole/api/lib/twitter/followers.py:\n    4: from api.app.mongodb import mongopool\n   27:     cursor = mongopool.twit.followers_cnt.find(finddict)\n   86:     cursor = mongopool.twit.followers_day_cnt \\\n  116:     for mention in mongopool.twit.mentions.find(finddict, { 'day': 1 }):\n\n/Users/alex/uberVU/thehole/api/lib/twitter/mentions.py:\n    4: from api.app.mongodb import mongopool\n   43:     cursor = mongopool.twit.mentions.find(query)\n\n/Users/alex/uberVU/thehole/api/lib/twitter/usertweets.py:\n    4: from api.app.mongodb import mongopool\n   22:     cursor = mongopool.twit.usertweets.find(query)\n\n/Users/alex/uberVU/thehole/api/test/api_helper.py:\n   12: # Using Mongopool, but this means one could connect to remote mongo servers,\n   14: from core.lib.mongodb.mongopool import MongoPool\n   20:         # Check that mongopool doesn't go to remote database servers\n   25:         mongomisc = MongoPool().misc\n\n/Users/alex/uberVU/thehole/api/test/apitestcase.py:\n   22: # Initialize mongopool.\n   38:             if self.mongopool.misc.feeds.count() > 2000:\n\n/Users/alex/uberVU/thehole/api/test/keywords_test_case.py:\n    3: # ApiTestCase is imported first to initialize singletons like MongoPool, needed\n   85:         client_keywords = self.mongopool.misc.client_keywords.find(find_dict)\n   99:         self.assertIsNone(self.mongopool.misc.keywords.find_one(finddict),\n  102:         self.assertIsNone(self.mongopool.misc.client_keywords.find_one(finddict),\n  106:         self.assertEquals(0, self.mongopool.misc.feeds.find(finddict).count())\n  107:         self.assertIsNone(self.mongopool.misc.feeds.find_one(finddict),\n  113:         self.mongopool.misc.client_keywords.ensure_index([('client', 1),\n  117:         self.mongopool.misc.client_keywords.ensure_index([('keyword', 1)])\n  118:         self.mongopool.misc.keywords.ensure_index([('keyword', 1)],\n  121:         self.mongopool.misc.client_sources.ensure_index([('client', 1),\n  125:         self.mongopool.misc.client_sources.ensure_index([('keyword', 1),\n  127:         self.mongopool.misc.client_sources.ensure_index([('keyword', 1),\n  129:         self.mongopool.misc.client_sources.ensure_index([('client', 1)])\n  138:         self.assertIsNotNone(self.mongopool.misc.client_keywords.find_one(finddict),\n  150:         keyword_entry = self.mongopool.misc.keywords.find_one(finddict)\n  157:         keyword_limit = max(self.mongopool.misc.client_keywords.find(finddict\n  168:             self.assertIsNotNone(self.mongopool.misc.feeds.find_one(finddict),\n\n/Users/alex/uberVU/thehole/api/test/smarttest.py:\n    1: # Because the mongopool, etc variables are global, these need to be set up\n\n/Users/alex/uberVU/thehole/api/test/test_custom_sources.py:\n    3: # KeywordsTestCase is imported first to initialize singletons like MongoPool,\n  181:         self.assertTrue(self.mongopool.misc.client_sources.find_one(find_dict),\n  184:         for item in self.mongopool.misc.client_sources.find(find_dict):\n  281:         return self.mongopool.misc.client_sources.find_one(find_dict)\n  286:         feed = self.mongopool.misc.feeds.find_one({'label': label})\n\n/Users/alex/uberVU/thehole/api/test/test_keywords.py:\n    3: # KeywordsTestCase is imported first to initialize singletons like MongoPool,\n  117:         self.mongopool.misc.client_keywords.insert(insert_dict)\n  135:         self.mongopool.misc.client_keywords.insert(insert_dict)\n  153:         self.mongopool.misc.client_keywords.insert(insert_dict)\n  157:         self.mongopool.misc.feeds.insert({'info': {'keyword': self.invalid_keyword},\n  181:         self.mongopool.misc.exclude.insert(new_kw_excluded)\n  187:         self.mongopool.misc.exclude.insert(edit_kw_excluded)\n  200:         self.assertFalse(self.mongopool.misc.exclude.find_one(\n  203:         self.assertEquals(self.mongopool.misc.exclude.count(), 1,\n  207:         new_excluded_entry = self.mongopool.misc.exclude.find_one()\n  244:         self.mongopool.misc.exclude.insert(new_kw_excluded)\n  257:         self.assertTrue(self.mongopool.misc.exclude.find_one(\n  261:         self.assertTrue(self.mongopool.misc.exclude.find_one(\n  278:         self.mongopool.misc.client_keywords.update(find_dict, update_dict)\n  290:         entry = self.mongopool.misc.client_keywords.find_one(find_dict)\n\n/Users/alex/uberVU/thehole/api/test/facebook/test_facebook_posts.py:\n   86:         comment = self.mongopool.facebook.comments.find_one()\n   88:         self.mongopool.facebook.comments.update(comment, update_dict)\n\n/Users/alex/uberVU/thehole/api/test/feeds/test_feeds.py:\n   12:         self.collection = self.mongopool.misc.feeds\n\n/Users/alex/uberVU/thehole/api/test/feeds/test_google_plus_feeds.py:\n   20:         self.collection = self.mongopool.misc.feeds\n\n/Users/alex/uberVU/thehole/api/test/mentions/estimator.py:\n   85: # Mock mongopool, there is no need to reach the actual database\n   86: estimator_lib.mongopool = MongoMock()\n\n/Users/alex/uberVU/thehole/api/test/mentions/test_excluder.py:\n   10: # ApiTestCase is imported first to initialize singletons like MongoPool, needed\n  134:         self.assertEquals(self.mongopool.misc.exclude.count(), 1,\n\n/Users/alex/uberVU/thehole/api/test/twitter/test_twitter_followers.py:\n   21:             self.mongopool.twit.followers_day_cnt.insert(follower)\n\n/Users/alex/uberVU/thehole/api/test/twitter/test_usertweets.py:\n   26:         self.mongopool.twit.usertweets.insert(tweet)\n   27:         self.mongopool.twit.usertweets.insert(retweet)\n   29:         with patch('api.lib.twitter.usertweets.mongopool', self.mongopool):\n\n/Users/alex/uberVU/thehole/controllers/base_controller.py:\n    8: from core.lib.mongodb.mongopool import MongoPool\n   75:         self.mongopool = MongoPool(options['mongopool'], network_timeout=300)\n   78:         self.mongo = self.mongodb = self.mongopool\n   96:             self.timeline = MentionsTimeline(self.mongopool,\n\n/Users/alex/uberVU/thehole/controllers/daq_producer.py:\n  163:         info = self.mongopool.misc.meta.find_one(find_dict)\n  187:         self.mongopool.misc.meta.update(find_dict, update_dict, upsert=True)\n\n/Users/alex/uberVU/thehole/controllers/feed_consumer.py:\n   94:         latest = self.mongopool.misc.feeds.find_one(query,\n  124:         result = self.mongopool.misc.feeds.update(\n\n/Users/alex/uberVU/thehole/controllers/test/test_base_controller.py:\n   20:         self.assertTrue(hasattr(controller, 'mongopool'))\n\n/Users/alex/uberVU/thehole/controllers/test/test_feed_consumer.py:\n   32:         feeds = my_feed_consumer.mongopool.misc.feeds\n\n/Users/alex/uberVU/thehole/core/ubvuconfig.py:\n   78:     config = options['mongopool'][cluster_name]\n   99:     # MongoPool._match_dbname. Refactor to use that, and remove redundant\n  114:     # Hack to make mongoengine compatible with MongoPool.test = True.\n\n/Users/alex/uberVU/thehole/core/lib/accounts_timeline.py:\n    6: from core.lib.mongodb.mongopool import MongoPool\n   49:         self.account_database = MongoPool()[self.platform]\n\n/Users/alex/uberVU/thehole/core/lib/deleting.py:\n    7: from core.lib.mongodb.mongopool import MongoPool\n   38:     mongopool = MongoPool()\n   42:     with MongoLock(mongopool.misc, 'delete_mention'):\n   56:             mongopool.misc.tagged.remove({'term': get_tagged_term(search),\n\n/Users/alex/uberVU/thehole/core/lib/documents_buffer.py:\n    8: from core.lib.mongodb.mongopool import MongoPool\n   29:         self.collection = MongoPool()[database_name].docs\n\n/Users/alex/uberVU/thehole/core/lib/excluder.py:\n   10: from core.lib.mongodb.mongopool import MongoPool\n   25:             self.collection = MongoPool().misc.exclude\n\n/Users/alex/uberVU/thehole/core/lib/feeds.py:\n   12: from core.lib.mongodb.mongopool import MongoPool\n   27:     def __init__(self, mongopool=None):\n   28:         # Get mongopool\n   29:         self.mongopool = mongopool\n   30:         if self.mongopool is None:\n   31:             self.mongopool = MongoPool()\n   65:         count = self.mongopool.misc.feeds.find(finddict).count()\n   87:         return self.mongopool.misc.feeds.find(finddict).count() > 0\n  118:                 self.mongopool.misc.feeds.update(finddict, {'$set': feed})\n  129:             self.mongopool.misc.feeds.insert(feed)\n  161:             self.mongopool.misc.feeds.update(finddict, updatedict)\n  175:             self.mongopool.misc.feeds.update(finddict, updatedict)\n  180:         self.mongopool.misc.feeds.remove(finddict)\n\n/Users/alex/uberVU/thehole/core/lib/mention_annotator.py:\n    7: from core.lib.mongodb.mongopool import MongoPool\n   14:         self.mongopool = MongoPool()\n   17:         self.gender_detector = GenderDetector(self.mongopool)\n\n/Users/alex/uberVU/thehole/core/lib/ratelimitstatus.py:\n    6: from core.lib.mongodb.mongopool import MongoPool\n   18:         self.mongopool = MongoPool()\n   21:         self.coll = self.mongopool.misc.credentials\n   48:         with MongoLock(self.mongopool.misc, self.platform):\n\n/Users/alex/uberVU/thehole/core/lib/sanitycheck.py:\n    3:     in mongopool.logs.sntyck.\n    8: from core.lib.mongodb.mongopool import MongoPool\n   16:         self.mongopool = MongoPool()\n   35:         self.mongopool.sntyck.docs.insert(record)\n\n/Users/alex/uberVU/thehole/core/lib/zipf_score.py:\n    2: from core.lib.mongodb.mongopool import MongoPool\n   14:         in the collection : mongopool.misc.zipf\n   16:         mongopool = MongoPool()\n   17:         self.collection = mongopool.misc.zipf\n\n/Users/alex/uberVU/thehole/core/lib/analytics/flattnr.py:\n   18: from core.lib.mongodb.mongopool import MongoPool\n   88:     mongopool = MongoPool()\n   93:     timeseries_flattnr = AttributeFlattnr(mongopool.timeseries,\n\n/Users/alex/uberVU/thehole/core/lib/credentials/mongo_credentials.py:\n    6: from core.lib.mongodb.mongopool import MongoPool\n   22:         self.mongopool = MongoPool()\n   23:         self.coll = self.mongopool.misc.credentials\n\n/Users/alex/uberVU/thehole/core/lib/location/location_detector.py:\n   26: from core.lib.mongodb.mongopool import MongoPool\n   99:             mongo = MongoPool()\n\n/Users/alex/uberVU/thehole/core/lib/mongodb/analytics_model.py:\n   13: from core.lib.mongodb.mongopool import MongoPool\n   76:         self.mongopool = MongoPool()\n   79:         self.geo_spread = GeoSpread(self.mongopool)\n  115:                 return self.mongopool.hour_counts.geolocation_estimates\n  117:                 return self.mongopool.hour_counts.estimates\n  121:                 return self.mongopool.geolocation.estimates\n  123:                 return self.mongopool.day_counts.estimates\n  125:                 return self.mongopool.misc.estimates\n\n/Users/alex/uberVU/thehole/core/lib/mongodb/attributes.py:\n   13:     def __init__(self, mongopool):\n   14:         self.flattnr = AttributeFlattnr(mongopool.misc, 'mention-attributes')\n\n/Users/alex/uberVU/thehole/core/lib/mongodb/document_changer.py:\n    8: from core.lib.mongodb.mongopool import MongoPool\n   46:         self.collection = MongoPool().document_changer[collection]\n\n/Users/alex/uberVU/thehole/core/lib/mongodb/geo_spread.py:\n    8: from core.lib.mongodb.mongopool import MongoPool\n   14:     def __init__(self, mongopool = None):\n   16:         if not mongopool:\n   17:             mongopool = MongoPool()\n   18:         self.mongopool = mongopool\n   19:         self.collection = mongopool.geolocation.docs\n  212:         self.location = AttributeFlattnr(self.mongopool.geolocation,\n  214:         self.attribute = AttributeFlattnr(self.mongopool.geolocation,\n\n/Users/alex/uberVU/thehole/core/lib/mongodb/iterators.py:\n    3: from core.lib.mongodb.mongopool import MongoPool\n   26:         clusters: a list of mongo clusters (specified in the mongopool section)\n   87:         mongopool = MongoPool()\n   88:         connection = mongopool.get_cluster(config['clusters'][0]['name'])\n  117:         mongopool = MongoPool()\n  122:             clustercopy['connection'] = mongopool.get_cluster(cluster['name'])\n\n/Users/alex/uberVU/thehole/core/lib/mongodb/mongopool.py:\n   24: class MongoPool(object):\n   29:         CAUTION: MongoPool uses the ReconnectingCollection class, which has\n   42:             config = ubvuconfig.options['mongopool']\n   45:         # mongopool.database will point to mongopool.test_database\n  120:         if MongoPool databases will be test databases or not.\n  129:             raise ValueError('MongoPool already initialized some databases! '\n  194:         # E.g.: MongoPool.misc -> MongoPool.test_misc\n\n/Users/alex/uberVU/thehole/core/lib/mongodb/spread.py:\n    9: from core.lib.mongodb.mongopool import MongoPool\n  230:     def __init__(self, mongopool=None):\n  231:         if mongopool is None:\n  232:             mongopool = MongoPool()\n  234:         self.reach_count_indexer = CountIndexerReach(mongopool)\n  235:         self.old_daily_indexer = CountIndexerDaily(mongopool)\n  236:         self.daily_langauge_indexer = CountIndexerDailyLanguageFilter(mongopool)\n  237:         self.hourly_indexer = CountIndexerHourly(mongopool)\n  238:         self.geo_indexer = GeoSpread(mongopool)\n  239:         self.fb_likes_indexer = CountIndexerFbLikes(mongopool)\n  240:         self.fb_shares_indexer = CountIndexerFbShares(mongopool)\n\n/Users/alex/uberVU/thehole/core/lib/mongodb/timeline.py:\n   16: from core.lib.mongodb.mongopool import MongoPool\n   45:     def __init__(self, mongopool=None, config=None, secondary_read_ratio=0.0):\n   47:            mongopool - a MongoPool instance\n   50:         # Backward compatibility: if mongopool and/or config are not supplied,\n   52:         if mongopool is None:\n   53:             mongopool = MongoPool()\n   57:         if not isinstance(mongopool, MongoPool):\n   58:             raise TypeError('expected MongoPool instance, got %r' %\n   59:                             type(mongopool))\n   69:         self.attribute_converter = AttributeConverter(mongopool)\n\n/Users/alex/uberVU/thehole/core/lib/tagcloud/collocation_model.py:\n    6: from core.lib.mongodb.mongopool import MongoPool\n   21:         self.mongopool = MongoPool()\n   26:         return self.mongopool.collocations.docs.find(finddict)\n   58:         self.mongopool.collocations.docs.update(finddict, updatedict,\n   73:             self.mongopool.collocations.docs.remove(finddict)\n\n/Users/alex/uberVU/thehole/core/lib/tagcloud/collocation_resource.py:\n   40:             self.timeline = MentionsTimeline(self.collocation_model.mongopool,\n   43:             self.timeline = MentionsTimeline(self.collocation_model.mongopool)\n\n/Users/alex/uberVU/thehole/core/lib/tagcloud/unsynced_collocations.py:\n    6: from core.lib.mongodb.mongopool import MongoPool\n   28:         self.mongopool = MongoPool()\n   29:         self.collection = self.mongopool.collocations.unsynced_collocations\n\n/Users/alex/uberVU/thehole/core/lib/twitter_credentials/twitter_credentials_pool.py:\n    8: from core.lib.mongodb.mongopool import MongoPool\n   30:         self.mongopool = MongoPool()\n   31:         self.coll = self.mongopool.misc.credentials\n\n/Users/alex/uberVU/thehole/core/test/backend_testcase.py:\n   11: from core.lib.mongodb.mongopool import MongoPool\n   67:         self.mongopool = MongoPool()\n   72:         assert self.mongopool.testrun\n   85:         assert self.mongopool.testrun\n\n/Users/alex/uberVU/thehole/core/test/fixtures_loader.py:\n   14: from core.lib.mongodb.mongopool import MongoPool\n   43:     mongopool = MongoPool()\n   58:                 mongo_collection = mongopool[db][collection]\n\n/Users/alex/uberVU/thehole/core/test/setup_testing.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   13:     switching MongoPool.test to True.\n   19:     # Set testrun on all MongoPool instances (singleton).\n   20:     mongopool = MongoPool()\n   21:     mongopool.testrun = True\n   23:     if not mongopool.testrun:\n\n/Users/alex/uberVU/thehole/core/test/test_keyword_flags.py:\n    3: from core.lib.mongodb.mongopool import MongoPool\n   83:         self.mongopool = MongoPool()\n   87:         if self.mongopool.misc.client_keywords.count() > 100:\n   91:         self.mongopool.misc.clients.remove(just_one=False)\n   92:         self.mongopool.misc.client_keywords.remove(just_one=False)\n   98:             self.mongopool.misc.clients.insert(client)\n  100:             self.mongopool.misc.client_keywords.insert(client_keyword)\n  104:         self.mongopool.misc.clients.remove(just_one=False)\n  105:         self.mongopool.misc.client_keywords.remove(just_one=False)\n\n/Users/alex/uberVU/thehole/core/test/credentials/test_credentials_pool.py:\n   23:         self.coll = self.mongopool.misc.credentials\n\n/Users/alex/uberVU/thehole/core/test/credentials/test_mongo_credentials.py:\n   27:         self.coll = self.mongopool.misc.credentials\n\n/Users/alex/uberVU/thehole/core/test/credentials/test_mysql_credentials.py:\n   25:         self.coll = self.mongopool.misc.credentials\n\n/Users/alex/uberVU/thehole/core/test/location/test_location_detector.py:\n   36:         self.mongopool.misc.cities.ensure_index([('location', '2d')])\n\n/Users/alex/uberVU/thehole/core/test/tagcloud/test_collocation_extractor.py:\n   47:         db_collocation_ids = self.mongopool.collocations.docs.distinct('_id')\n\n/Users/alex/uberVU/thehole/core/test/tagcloud/test_collocation_model.py:\n   15:         # Set-up collocation_model with mongopool mock.\n   17:         self.collocation_model.mongopool = mock.Mock()\n   24:         \"\"\"Assert that fetch_collocatons does call mongopool.\"\"\"\n   26:         mongo_fetch = self.collocation_model.mongopool.collocations.docs.find\n   51:         mongo_update = self.collocation_model.mongopool.collocations.docs.update\n   75:         mongo_update = self.collocation_model.mongopool.collocations.docs.update\n  129:         mongo_remove = self.collocation_model.mongopool.collocations.docs.remove\n\n/Users/alex/uberVU/thehole/core/test/tagcloud/test_collocation_resource.py:\n   16:         # Set-up collocation_resource with mongopool mock.\n   18:         # Mock the mongopool from collocation model.\n   20:         collocation_model.mongopool = Mock()\n\n/Users/alex/uberVU/thehole/core/test/twitter_credentials/test_twitter_credentials_pool.py:\n   34:         coll = self.mongopool.misc.credentials\n   65:         self.mongopool.misc.credentials.insert(obj)\n  203:         coll = self.mongopool.misc.credentials\n\n/Users/alex/uberVU/thehole/core/test/twitter_credentials/test_twitter_multiple_credentials_api.py:\n   40:         coll = self.mongopool.misc.credentials\n\n/Users/alex/uberVU/thehole/core/test/unit/test_keyword_languages.py:\n   62:         return (self.mongopool.misc.client_keywords.find(finddict).\n\n/Users/alex/uberVU/thehole/core/test/unit/flattnr/test_attribute_flattnr.py:\n    8:         self.attribute_flattnr1 = AttributeFlattnr(self.mongopool.flattn_test)\n    9:         self.attribute_flattnr2 = AttributeFlattnr(self.mongopool.flattn_test)\n\n/Users/alex/uberVU/thehole/core/test/unit/mongodb/analytics_model.py:\n    5: from core.lib.mongodb.mongopool import MongoPool\n   26:         self.mongopool = MongoPool(options['mongopool'])\n\n/Users/alex/uberVU/thehole/core/test/unit/mongodb/mongopool.py:\n    5: from core.lib.mongodb.mongopool import MongoPool, HourlyCountsSegmentedDatabase\n   34: class MongoPoolTest(unittest.TestCase):\n   38:         self.mongopool = MongoPool(self.config)\n   41:         # Test that mongopool redirects counts db to misc db (yes, this is a\n   42:         # MongoPool hack).\n   43:         db = self.mongopool.counts\n   59:             self.mongopool.hour_counts.docs.insert(doc)\n   66:         cursor = self.mongopool.hour_counts.docs.find(finddict)\n   73:         c = self.mongopool.get_cluster('mongo-misc')\n   80:             self.mongopool.get_cluster('no-cluster')\n   83:         # Test both mongopool.dbname and mongopool[dbname]\n   84:         self.assertTrue(self.mongopool.twit.mentions.count())\n   85:         self.assertTrue(self.mongopool['twit'].mentions.count())\n   90:             collections = self.mongopool[dbname].collection_names()\n   95:             self.mongopool.baddb\n   98:             self.mongopool['baddb2'].smth.count()\n  101:             self.mongopool.facebookbad\n  104:             self.mongopool.twitbad\n  108:         # Inherit from MongoPool and create a new class that also counts\n  110:         class MongoPoolCountingConnection(MongoPool):\n  116:                 return MongoPool._get_connection(self, cluster)\n  118:         counting_mongopool = MongoPoolCountingConnection(self.config)\n  119:         counting_mongopool.twit\n  120:         counting_mongopool['facebook']\n  122:         self.assertEqual(counting_mongopool.opened_connections, 1)\n  124:         counting_mongopool.twit.mentions.count()\n  125:         self.assertEqual(counting_mongopool.opened_connections, 1)\n  127:         counting_mongopool.uvdb_1\n  128:         counting_mongopool.uvdb_2\n  129:         counting_mongopool.uvdb_1\n  131:         self.assertEqual(counting_mongopool.opened_connections, 2)\n  133:         counting_mongopool.twit\n  134:         self.assertEqual(counting_mongopool.opened_connections, 2)\n  140:         self.assertFalse(self.mongopool.misc.name.startswith('test_'))\n\n/Users/alex/uberVU/thehole/core/test/unit/mongodb/test_iterators.py:\n    9: from core.lib.mongodb.mongopool import MongoPool\n   14:     'mongopool': {\n   69: # Initialize MongoPool here so that it doesn't use the configuration\n   71: MongoPool(CONFIG['mongopool'])\n   74: # of the way they manipulate the configuration of MongoPool, which is a\n   76: # which means other tests might be affected by the MongoPool custom settings\n\n/Users/alex/uberVU/thehole/core/test/unit/mongodb/test_mongo_spread.py:\n  313:                                  self.mongopool.counts.counts)\n  350:         self.mongopool.fb_likes_counts.docs.remove()\n  356:                                          self.mongopool.fb_likes_counts.docs,\n\n/Users/alex/uberVU/thehole/core/test/unit/mongodb/test_timeline.py:\n    8: from core.lib.mongodb.mongopool import MongoPool\n   13: MONGOPOOL_CONFIG_YAML = '''\n   14: mongopool:\n   66: SEGMENTED_CONFIG_YAML = ((MONGOPOOL_CONFIG_YAML + SEGMENTED_CONFIG_YAML) %\n   68: UNSEGMENTED_CONFIG_YAML = ((MONGOPOOL_CONFIG_YAML + UNSEGMENTED_CONFIG_YAML) %\n  109:         self.mongopool = MongoPool(config['mongopool'])\n  111:         self.recent_connection = self.mongopool.get_cluster('mongo-recent')\n  112:         self.hist_connection = self.mongopool.get_cluster('mongo-hist')\n  118:         self.mongopool.document_changer.mentions_timeline.remove(just_one=False)\n  123:         self.timeline = MentionsTimeline(self.mongopool,\n\n/Users/alex/uberVU/thehole/cyclops/fabfile.py:\n   15: from core.lib.mongodb.mongopool import MongoPool\n   33: # Use mongopool to pass locks db\n   34: mongopool = MongoPool()\n   93:         host_lock = MongoLock(mongopool.misc, env.host_string)\n\n/Users/alex/uberVU/thehole/dash/views/clients_history.py:\n    7: from core.lib.mongodb.mongopool import MongoPool\n   30:         mongopool = MongoPool()\n   31:         self.collection = mongopool.misc.keywords_history\n\n/Users/alex/uberVU/thehole/dash/views/customerkeywords.py:\n    7: from core.lib.mongodb.mongopool import MongoPool\n   17:         mongopool = MongoPool()\n   21:         message['api'] = self.get_api(mongopool)\n   34:     def get_api(self, mongopool):\n   39:         apikeys = mongopool.misc.client_keywords.find(query).distinct('client')\n   41:             count = len(mongopool.misc.client_keywords.find({'client': apikey,\\\n\n/Users/alex/uberVU/thehole/dash/views/feeds.py:\n   14: from core.lib.mongodb.mongopool import MongoPool\n   43:       con = MongoPool()\n   91:     con = MongoPool()\n\n/Users/alex/uberVU/thehole/dash/views/tests.py:\n   10: from core.lib.mongodb.mongopool import MongoPool\n   16:     mongopool = MongoPool()\n   25:         for item in mongopool.tests.results.find(find_dict):\n\n/Users/alex/uberVU/thehole/data_acquisition/lib/daq_omgili_scheduler.py:\n   62:         omgili_meta = self.mongopool.misc.meta.find_one(find_dict)\n   81:         self.mongopool.misc.meta.update(find_dict, update_dict, upsert=True)\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/add_platform.py:\n   28:         self.feeds = Feeds(self.mongopool)\n   55:             if not self.mongopool.misc.feeds.find_one(find_dict):\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/add_syndicated_feeds.py:\n   66:             feed = self.mongopool.misc.feeds.find_one({'label': 'syndicated', 'info.url': url})\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/check_platform_credentials.py:\n   41:         credentials = self.mongopool.misc.credentials.find({'platform': self.platform})\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/gnip_twitter_loss.py:\n   16:         for item in self.mongopool.tests.results.find():\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/language_agnostic_facebook.py:\n   19:         self.facebook_platform = self.mongopool.misc.platforms.find_one(\n   38:         for keyword_entry in self.mongopool.misc.keywords.find():\n   56:         for client_keyword_entry in self.mongopool.misc.client_keywords.find(\n   78:         for feed in self.mongopool.misc.feeds.find(\n   99:         current_languages = self.mongopool.misc.feeds.find(\n  102:         distinct_since_values = self.mongopool.misc.feeds.find(\n  110:             self.mongopool.misc.feeds.remove(facebook_feeds_finddict,\n  123:         return (self.mongopool.misc.client_keywords.find(finddict).count() > 0)\n  128:             self.mongopool.misc.keywords.remove({'keyword': keyword})\n  134:         if not self.mongopool.misc.keywords.find_one({'keyword': keyword}):\n  143:         facebook_feed_count = (self.mongopool.misc.feeds.find(\n  155:             self.mongopool.misc.feeds.remove(query)\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/language_agnostic_twitter.py:\n   53:         self.twitter_platform = self.mongopool.misc.platforms.find_one(\n   55:         self.facebook_platform = self.mongopool.misc.platforms.find_one(\n   74:         for keyword_entry in self.mongopool.misc.keywords.find():\n   93:         for client_keyword_entry in self.mongopool.misc.client_keywords.find(\n  114:         for feed in self.mongopool.misc.feeds.find(\n  140:         feeds = list(self.mongopool.misc.feeds.find(twitter_feeds_finddict))\n  152:         distinct_since_values = self.mongopool.misc.feeds.find(\n  160:             self.mongopool.misc.feeds.remove(twitter_feeds_finddict,\n  170:         current_languages = self.mongopool.misc.feeds.find(\n  190:         return (self.mongopool.misc.client_keywords.find(finddict).count() > 0)\n  195:             self.mongopool.misc.keywords.remove({'keyword': keyword})\n  201:         if not self.mongopool.misc.keywords.find_one({'keyword': keyword}):\n  212:         twitter_feed_count = (self.mongopool.misc.feeds.find(twitter_finddict).\n  218:         facebook_feed_count = (self.mongopool.misc.feeds.find(facebook_finddict).\n  230:             self.mongopool.misc.feeds.remove(query)\n  232:             self.mongopool.misc.feeds.remove(query)\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/migrate_feeds.py:\n    9:         self.mongopool.misc.feeds.update({'label': label}, {'$rename': {'info.last_timestamp': 'info.since'}}, multi=True)\n   16:         feeds_collection = self.mongopool.misc.feeds\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/process_historical_feeds.py:\n   31:             feed = self.mongopool.misc.feeds.find_one(find_dict)\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/remove_duplicated_syndicated.py:\n   39:         return (self.mongopool.misc.feeds.find({'label': 'syndicated'}).\n   62:         self.mongopool.misc.feeds.remove(finddict)\n\n/Users/alex/uberVU/thehole/data_acquisition/scripts/update_platform_credentials.py:\n   58:             response = self.mongopool.misc.credentials.update(\n\n/Users/alex/uberVU/thehole/data_acquisition/test/test_daq_googleplus_fetcher.py:\n   48:         self.mongopool.misc.credentials.insert(MOCK_CREDENTIAL)\n   58:         updated_credential = self.mongopool.misc.credentials.find_one()\n\n/Users/alex/uberVU/thehole/data_acquisition/test/test_daq_omgili_scheduler.py:\n   37:         self.controller.mongopool.misc.meta.save(insert_dict)\n   55:         meta_info = self.mongopool.misc.meta.find_one(find_dict)\n\n/Users/alex/uberVU/thehole/data_acquisition/test/facebook/test_locales.py:\n   23:         self.mongopool.misc.feeds.insert(FEED_FIXTURE)\n   27:         old_feed = self.mongopool.misc.feeds.find_one(FEED_FIXTURE)\n   30:         feeds_count = self.mongopool.misc.feeds.count()\n   34:         locales = self.mongopool.misc.feeds.distinct('info.locale')\n\n/Users/alex/uberVU/thehole/docs/dokuwiki/backend/feeds.md:\n    6: mongopool.platforms contains a list of platforms. A platform may\n   15: 'blogsearch') and then written to mongopool.misc.feeds.\n\n/Users/alex/uberVU/thehole/docs/dokuwiki/backend/modules.md:\n   43:         -   mongopool.misc.feeds\n  119: -   mongopool.facebook.posts\n  120: -   mongopool.facebook.comments\n  142: -   mongopool.facebook.insights\n  153: -   mongopool.facebook.insights\n  171: -   mongopool.facebook.posts\n  172: -   mongopool.facebook.comments\n  198: -   mongopool.misc.feeds\n  246: -   mongopool.misc.credentials\n  264: -   mongopool.misc.feeds\n  285: -   mongopool.misc.exclude\n  286: -   mongopool.misc.tagged\n  287: -   mongopool.misc.count, mongopool.misc.reach\\_counts,\n  288:     mongopool.day\\_count.docs, mongopool.hour\\_counts.docs\n  325: -   self.mongopool.feeds\n  344: -   self.mongopool.feeds\n  367: -   mongopool.misc.keywords\n  391: -   mongopool.misc.keywords\n  424: -   mongopool.misc (location, gender, exclude)\n  446: -   mongopool.misc.credentials\n  472: -   mongopool.misc.credentials\n  488: -   mongopool.misc.keywords\n  525: -   mongopool.misc.counts\n  526: -   mongopool.misc.reach\\_counts\n  527: -   mongopool.day\\_counts\n  528: -   mongopool.hour\\_counts\n  540: -   mongopool.geolocation\n  563: -   mongopool.misc.keywords\n  747: -   MongoPool\n  752: -   MongoPool\n  772: -   MongoPool\n\n/Users/alex/uberVU/thehole/docs/dokuwiki/backend/writing_modules.md:\n  204:     -   remove the module's entry from mongopool.misc.platforms\n  205:     -   remove all the feeds from mongopool.misc.feeds that have the\n  208:         in mongopool.misc.platforms have been removed)\n\n/Users/alex/uberVU/thehole/docs/infrastructure/deleting_mentions.md:\n   28:     * The entry in mongopool.misc.exclude(or other collection that's behind [Excluder](https://github.com/uberVU/thehole/blob/master/core/lib/excluder.py)) belonging to the \"django\" keyword is created/updated with the new author.\n\n/Users/alex/uberVU/thehole/email_alerts/mentions_realtime_digest.py:\n  146:             cursor = self.mongopool.recent_mentions.docs.find(finddict, fields)\n\n/Users/alex/uberVU/thehole/excluder/lib/excluder.py:\n   16:         self.mongospread = MongoSpread(self.mongopool)\n   20:         self.mention_excluder = ExcludeMention(self.mongopool.misc.exclude,\n   21:                                                self.mongopool.misc.tagged,\n\n/Users/alex/uberVU/thehole/excluder/lib/excluder_lock.py:\n   13:         self.feeds = self.mongopool.misc.feeds\n   14:         self.feeds_processor = Feeds(self.mongopool)\n\n/Users/alex/uberVU/thehole/facebook_accounts/lib/facebook_estimates.py:\n   25:         last_accurate_insights = self.mongopool.facebook.insights\\\n   55:         today_insights = self.mongopool.facebook.insights.find_one(find_today)\n   59:         yesterday_insights = self.mongopool.facebook.insights.find_one(find_yesterday)\n   75:         self.mongopool.facebook.insights.update(find_today, update, upsert=True)\n   83:         accurate_day_insights = self.mongopool.facebook.insights.find_one(find_accurate_day)\n   85:         inacurate_day_insights = self.mongopool.facebook.insights.find_one(find_inacurate_day)\n   95:         self.mongopool.facebook.insights.update(find_inacurate_day,\n\n/Users/alex/uberVU/thehole/facebook_accounts/lib/facebook_feed_consumer.py:\n   20:             with writes in mongopool.facebook.* collections\n\n/Users/alex/uberVU/thehole/facebook_accounts/lib/facebook_posts_analytics.py:\n   23:         for post in self.mongopool.facebook.posts.find(find_dict, fields):\n\n/Users/alex/uberVU/thehole/facebook_accounts/lib/facebook_writer.py:\n    7: from core.lib.mongodb.mongopool import MongoPool\n   16:         self.mongopool = MongoPool()\n   20:         self.mongopool.facebook.posts.ensure_index([('page_id', ASCENDING),\n   22:         self.mongopool.facebook.posts.ensure_index([('page_id', ASCENDING),\n   24:         self.mongopool.facebook.comments.ensure_index([('page_id', ASCENDING),\n   26:         self.mongopool.facebook.comments.ensure_index([('root', ASCENDING),\n   30:         self.mongopool.facebook.insights.ensure_index([('id', ASCENDING),\n   39:             self.mongopool.facebook.posts.insert(post, safe=True)\n   59:         self.mongopool.facebook.posts.update(find_dict, {'$set': update_dict})\n   70:             self.mongopool.facebook.comments.insert(comment)\n   83:         post = self.mongopool.facebook.posts.find_one(find_dict)\n   94:             self.mongopool.facebook.posts.update(find_dict, update_dict)\n  108:         self.mongopool.facebook.posts.update(find_dict, update_dict)\n  126:             self.mongopool.facebook.insights.update(find, update, upsert=True)\n  129:         elif self.mongopool.facebook.insights.find_one(find):\n\n/Users/alex/uberVU/thehole/facebook_accounts/scripts/create_facebook_feeds.py:\n   11:         self.feeds = Feeds(self.mongopool)\n   28:         for feed in self.mongopool.misc.feeds.find(find_dict):\n\n/Users/alex/uberVU/thehole/facebook_accounts/scripts/move_analytics_one_day_left.py:\n   18:         return self.mongopool.facebook.insights.distinct('id')\n   25:         page_analytics = self.mongopool.facebook.insights.find(find_dict, fields)\\\n   48:             self.mongopool.facebook.insights.insert(new_analytics_entry)\n   52:             self.mongopool.facebook.insights.remove(remove_dict)\n\n/Users/alex/uberVU/thehole/facebook_accounts/scripts/move_posts_analytics.py:\n    9:         return self.mongopool.facebook.posts_analytics.distinct('page_id')\n   13:         page_id_post_analytics = self.mongopool.facebook.posts_analytics.find(find_dict)\n   34:         self.mongopool.facebook.posts.update(find_dict, {'$set': update_dict})\n\n/Users/alex/uberVU/thehole/facebook_accounts/scripts/remove_duplicated_posts.py:\n   16:         self.database = self.mongopool.facebook\n   20:         return (self.mongopool.misc.feeds\n\n/Users/alex/uberVU/thehole/facebook_accounts/scripts/update_pageid_clientsources.py:\n   16:         for client_source in self.mongopool.misc.client_sources.find(find_dict):\n   22:                 feed = self.mongopool.misc.feeds.find_one(find_dict)\n   32:             self.mongopool.misc.client_sources.save(client_source)\n\n/Users/alex/uberVU/thehole/facebook_accounts/test/test_facebook_estimates.py:\n   27:         self.insights = self.mongopool.facebook.insights\n\n/Users/alex/uberVU/thehole/facebook_accounts/test/test_facebook_insights.py:\n   14:         self.assertTrue(self.mongopool.facebook.insights.count())\n   18:         for item in self.mongopool.facebook.insights.find():\n\n/Users/alex/uberVU/thehole/facebook_accounts/test/test_facebook_posts_analytics.py:\n   25:             self.mongopool.facebook.posts.insert(post)\n   39:         for item in self.mongopool.facebook.posts.find():\n\n/Users/alex/uberVU/thehole/facebook_accounts/test/test_facebook_wall.py:\n   30:             for item in self.mongopool.facebook[collection].find():\n   39:             count += self.mongopool.facebook[collection].count()\n\n/Users/alex/uberVU/thehole/facebook_accounts/test/test_facebook_writer.py:\n   53:         post = self.mongopool.facebook.posts.find_one()\n   54:         comment = self.mongopool.facebook.comments.find_one()\n   66:         post = self.mongopool.facebook.posts.find_one()\n   67:         comment = self.mongopool.facebook.comments.find_one()\n   86:         self.assertEquals(self.mongopool.facebook.posts.count(), 1)\n   87:         post = self.mongopool.facebook.posts.find_one()\n   99:         new_post = self.mongopool.facebook.posts.find_one()\n\n/Users/alex/uberVU/thehole/google_plus_accounts/lib/google_plus_fans_analytics.py:\n    5: from core.lib.mongodb.mongopool import MongoPool\n   14:         fans:      MongoPool().googleplus.analytics\n   17:         mongopool = MongoPool()\n   18:         self.analytics_collection = mongopool.googleplus.analytics\n\n/Users/alex/uberVU/thehole/google_plus_accounts/lib/google_plus_writer.py:\n    6: from core.lib.mongodb.mongopool import MongoPool\n   15:         posts:     MongoPool().googleplus.posts\n   16:         comments:  MongoPool().googleplus.comments\n   25:         mongopool = MongoPool()\n   27:         self.posts_collection = mongopool.googleplus.posts\n   28:         self.comments_collection = mongopool.googleplus.comments\n\n/Users/alex/uberVU/thehole/integration-tests/lib/analyticscheck.py:\n   21:         self.mongospread = MongoSpread(self.mongopool)\n\n/Users/alex/uberVU/thehole/integration-tests/lib/goblin.py:\n   30:         self.mongospread = MongoSpread(self.mongopool)\n\n/Users/alex/uberVU/thehole/intelligence/lib/alerts_finder.py:\n   24:         self.mongospread = MongoSpread(self.mongopool)\n\n/Users/alex/uberVU/thehole/intelligence/lib/base_signals_digest.py:\n   15:         self.signals_collection = self.mongopool.signals.docs\n\n/Users/alex/uberVU/thehole/intelligence/lib/houdini.py:\n   37:         doc = self.mongopool.misc.houdini.find_one()\n   64:             self.mongopool.misc.houdini.update(doc, {'$set': processed_dict})\n   66:             self.mongopool.misc.houdini.insert(processed_dict)\n\n/Users/alex/uberVU/thehole/intelligence/lib/influencers_finder.py:\n   55:         self.mongopool.retweet_logs.docs.ensure_index(\n\n/Users/alex/uberVU/thehole/intelligence/lib/mention_classifier_trainer.py:\n   25:         self.mongopool.classifiers.docs.ensure_index(indexes)\n   63:         docs = list(self.mongopool.classifiers.docs.find(query))\n\n/Users/alex/uberVU/thehole/intelligence/lib/retweets_writer.py:\n   43:         self.mongopool.retweet_logs.docs.ensure_index(\n   45:         self.mongopool.retweet_logs.docs.ensure_index(\n  148:         self.mongopool.retweet_logs.docs.insert({\n\n/Users/alex/uberVU/thehole/intelligence/lib/signals_mongo_writer.py:\n   17:         self.signals_collection = self.mongopool.signals.docs\n   87:         mongo_feed = self.mongopool.misc.feeds.find_one(finddict)\n   93:             self.mongopool.misc.feeds.update(finddict,\n\n/Users/alex/uberVU/thehole/intelligence/lib/helpers/gridfs_storage.py:\n    5: from core.lib.mongodb.mongopool import MongoPool\n   12:         db = MongoPool().classifiers\n\n/Users/alex/uberVU/thehole/intelligence/lib/helpers/asking_for_help/tagged_searches.py:\n    9: from core.lib.mongodb.mongopool import MongoPool\n\n/Users/alex/uberVU/thehole/intelligence/lib/helpers/classifier/training_data.py:\n    5: from core.lib.mongodb.mongopool import MongoPool\n   15:         self.mongopool = MongoPool()\n   26:         return getattr(getattr(self.mongopool, self.db), self.collection)\n\n/Users/alex/uberVU/thehole/intelligence/scripts/build_graph.py:\n   13: from core.lib.mongodb.mongopool import MongoPool\n   21: redispool, mongopool, author_store = None, None, None\n   24: 	global redispool, mongopool, author_store\n   26: 	mongopool = MongoPool()\n   38: 	for entry in mongopool.retweet_logs.docs.find(fetch_query):\n\n/Users/alex/uberVU/thehole/intelligence/scripts/collections_diff.py:\n   58:         self.collection_1 = self.mongopool.classifiers.houdini\n   61:         self.collection_2 = self.mongopool.classifiers.sent_to_houdini\n\n/Users/alex/uberVU/thehole/intelligence/scripts/migrate_samples.py:\n   10:         dest = self.mongopool.classifiers.docs\n   11:         source = self.mongopool.classifiers.test\n\n/Users/alex/uberVU/thehole/intelligence/scripts/test_recorder.py:\n   19:         docid = self.mongopool.classifiers.test_results.insert(test_result)\n   49:         cursor = self.mongopool.classifiers.docs.find()\n\n/Users/alex/uberVU/thehole/intelligence/scripts/tfidf.py:\n   69:         return list(self.mongopool.classifiers.docs.find())\n\n/Users/alex/uberVU/thehole/intelligence/scripts/asking_for_help/a4h_ngram_trainer.py:\n   70:         cursor = self.mongopool.misc.tagged.find(query, fields)\n\n/Users/alex/uberVU/thehole/intelligence/scripts/classifier/detect_english_tweets.py:\n   56:         for mention in self.mongopool.classifiers.sample_tweets.find():\n   61:                 self.mongopool.classifiers.english_sample_tweets.insert(mention)\n\n/Users/alex/uberVU/thehole/intelligence/scripts/classifier/label_a4h.py:\n   20:         source = self.mongopool.junk.a4h\n   21:         dest = self.mongopool.classifiers.a4h_samples\n\n/Users/alex/uberVU/thehole/intelligence/scripts/classifier/label_stats.py:\n   22:         for mention in self.mongopool.classifiers.docs.find():\n\n/Users/alex/uberVU/thehole/intelligence/scripts/classifier/logistic_regression_sample_weights.py:\n   72:         mentions = list(self.mongopool.classifiers.docs.find())\n\n/Users/alex/uberVU/thehole/intelligence/scripts/classifier/migrate_a4h_samples.py:\n    7:         source = self.mongopool.misc.tagged\n    8:         dest = self.mongopool.classifiers.a4h_samples\n\n/Users/alex/uberVU/thehole/intelligence/scripts/classifier/prophet_trainer.py:\n    6:         docs = list(self.mongopool.classifiers.docs.find())\n\n/Users/alex/uberVU/thehole/intelligence/test/test_influencers_finder.py:\n   36:             self.mongopool.retweet_logs.docs.index_information()\n   55:         eq_(self.mongopool.retweet_logs.docs.count(), 128,\n\n/Users/alex/uberVU/thehole/intelligence/test/test_influencers_processor.py:\n   37:         self.message = self.mongopool.influencers_processor.docs.find_one({}, {\n\n/Users/alex/uberVU/thehole/intelligence/test/test_retweets_writer.py:\n   70:         self.assertEqual(self.mongopool.retweet_logs.docs.count(), 0)\n   90:         docs = list(self.mongopool.retweet_logs.docs.find(finddict))\n  114:         docs = list(self.mongopool.retweet_logs.docs.find(finddict))\n\n/Users/alex/uberVU/thehole/jobs/job_manager.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n  318:         return MongoPool().jobs.docs\n\n/Users/alex/uberVU/thehole/legacy/lib/database_uploader.py:\n   51:         collection = self.mongopool[database].mentions\n\n/Users/alex/uberVU/thehole/legacy/lib/persistence.py:\n    3: from core.lib.mongodb.mongopool import MongoPool\n    8:         mongopool.misc once every few minutes, if update_frequency\n   17:         mongopool = MongoPool()\n   18:         self.store = mongopool.misc.persistence\n   80:         mongopool = MongoPool()\n\n/Users/alex/uberVU/thehole/legacy/lib/uploading.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   19:     collection = MongoPool()[database].mentions\n\n/Users/alex/uberVU/thehole/legacy/test/persistence.py:\n    3: from core.lib.mongodb.mongopool import MongoPool\n   13:         cls.mongopool = MongoPool()\n   17:         self.collection = self.mongopool['testpersiter'].mentions\n   19:         self.mongopool.misc.persistence.remove(just_one=False)\n\n/Users/alex/uberVU/thehole/legacy/test/test_collection_iterator.py:\n   19:         collection = self.mongopool.ubervu.mentions\n\n/Users/alex/uberVU/thehole/legacy/test/test_uploading.py:\n   15:         self.mongopool.ubervu.mentions.insert({'_id': first_id})\n   16:         self.mongopool.ubervu.mentions.insert({'_id': last_id})\n\n/Users/alex/uberVU/thehole/mentions/lib/facebook_authors.py:\n   52:         return list(self.mongopool.misc.credentials.find(query))\n\n/Users/alex/uberVU/thehole/mentions/lib/heavyweight.py:\n   41:         self.gender_detector = GenderDetector(self.mongopool)\n   42:         self.excluder = Excluder(self.mongopool.misc.exclude)\n\n/Users/alex/uberVU/thehole/mentions/lib/recent_mentions_writer.py:\n   28:         self.mongopool.recent_mentions.docs.ensure_index(\n   31:         self.mongopool.recent_mentions.docs.ensure_index(\n   57:                 self.mongopool.recent_mentions.docs.insert(mention)\n\n/Users/alex/uberVU/thehole/mentions/lib/helpers/counts_estimator.py:\n    7: from core.lib.mongodb.mongopool import MongoPool\n   76:         mongopool = MongoPool()\n   83:         mongopool.tests.timestamps.update(find_dict, update_dict, upsert=True)\n\n/Users/alex/uberVU/thehole/mentions/lib/helpers/duplicates_remover.py:\n    9: from core.lib.mongodb.mongopool import MongoPool\n   51:         self.mongodb_coll = MongoPool().duplicates.docs\n\n/Users/alex/uberVU/thehole/mentions/scripts/remove_duplicates_for_stream.py:\n   42:         self.mongopool.set_timeout(None)\n\n/Users/alex/uberVU/thehole/mentions/test/test_analytics_estimator.py:\n    9: from core.lib.mongodb.mongopool import MongoPool\n\n/Users/alex/uberVU/thehole/mentions/test/helpers/test_duplicates_remover.py:\n   24:         self.assertEqual(self.mongopool.duplicates.docs.count(), 0,\n   27:         self.assertEqual(self.mongopool.duplicates.docs.count(), 1,\n   38:         self.assertEqual(self.mongopool.duplicates_remover.docs.count(), 0,\n   41:         self.assertEqual(self.mongopool.duplicates_remover.docs.count(), 0,\n\n/Users/alex/uberVU/thehole/models/factories/twitter_followers_day_cnt.py:\n   12:     mongopool.twit.followers_day_cnt.\n\n/Users/alex/uberVU/thehole/models/nonrel/influencer_extra/test_influencer_extra.py:\n   13:         # DB checks will be done with MongoPool because the queryset of\n   15:         # independently. If you want to know how Mongopool is wired up with\n   22:         collection = self.mongopool.signals.influencer_extra\n\n/Users/alex/uberVU/thehole/models/nonrel/influencer_graph/influencer_graph.py:\n    6: from core.lib.mongodb.mongopool import MongoPool\n   30:         self.mongopool = MongoPool()\n   82:         retweets = self.mongopool.retweet_logs.docs.find(finddict)\n\n/Users/alex/uberVU/thehole/models/nonrel/influencer_graph/influencer_graph_factory.py:\n    5: from core.lib.mongodb.mongopool import MongoPool\n   20:         self.mongopool = MongoPool()\n   28:         self.mongopool.retweet_logs.docs.remove()\n   35:             self.mongopool.retweet_logs.docs.save(retweet)\n\n/Users/alex/uberVU/thehole/mongomodels/test/test_api_client.py:\n   12:         self.mongopool.misc.clients.insert(mongo_doc)\n   24:         self.mongopool.misc.clients.insert(mongo_doc)\n\n/Users/alex/uberVU/thehole/mongomodels/test/test_client_custom_source.py:\n   27:         self.mongopool.misc.client_sources.insert(copy.copy(inserted_ccs))\n   54:         # Insert a v1 custom source object in database (via mongopool.insert,\n   58:         self.mongopool.misc.client_sources.insert(inserted_ccs)\n   94:         self.mongopool.misc.client_sources.insert(ccs)\n\n/Users/alex/uberVU/thehole/mongomodels/test/test_client_streams.py:\n   15:         indexes = self.mongopool.misc.client_keywords.index_information()\n   27:         self.mongopool.misc.client_keywords.insert(mongo_doc)\n\n/Users/alex/uberVU/thehole/mongomodels/test/test_estimates.py:\n   22:         self.mongopool.estimates.docs.insert(mongo_doc)\n\n/Users/alex/uberVU/thehole/mongomodels/test/test_feed.py:\n   18:         indexes = self.mongopool.misc.feeds.index_information()\n   39:         self.mongopool.misc.feeds.insert(mongo_doc)\n\n/Users/alex/uberVU/thehole/mongomodels/test/test_stream.py:\n   21:         self.mongopool.misc.keywords.insert({'keyword': keyword,\n\n/Users/alex/uberVU/thehole/mongomodels/test/integration/test_stream_feed_integration.py:\n   56:         self.mongopool.misc.keywords.insert({'keyword': 'apple', 'limit': 1})\n\n/Users/alex/uberVU/thehole/posting/test/test_scheduled_posts_consumer.py:\n   27:         created as well in mongopool jobs collection.\n\n/Users/alex/uberVU/thehole/twitter_accounts/README.md:\n   56:      * Write the mention's author in mongopool.twit.followers\n   67:      * Write the mention's author in mongopool.twit.followers\n   79:   * Updates the already existing mentions in mongopool.twit.usertweets \n  116: saves them in mongopool.twit.followersids collection. \n  150:   * Write user in mongopool.twit.followers collection\n\n/Users/alex/uberVU/thehole/twitter_accounts/lib/compute_impressions.py:\n    7: from core.lib.mongodb.mongopool import MongoPool\n   70:     MongoPool().twit[collection].update(find_dict, update_dict, safe=True)\n\n/Users/alex/uberVU/thehole/twitter_accounts/lib/twitter_annotator.py:\n    8: from core.lib.mongodb.mongopool import MongoPool\n   22:         self.mongopool = MongoPool()\n   25:         self.attribute_converter = AttributeConverter(self.mongopool)\n\n/Users/alex/uberVU/thehole/twitter_accounts/lib/twitter_authors_writer.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   14:         self.mongopool = MongoPool()\n   17:         self.lock = MongoLock(self.mongopool.twit, 'update-followers')\n   23:         follower = self.mongopool.twit.followers.find_one(find_dict)\n   47:             follower_in_db = self.mongopool.twit.followers.find_one(find_follower_dict)\n   56:         self.mongopool.twit.followers.update(find_dict, update_dict, upsert=True)\n   73:             follower_in_db = self.mongopool.twit.followers.find_one(finddict)\n   85:                 self.mongopool.twit.followers.update(finddict, author, upsert=True)\n   93:                 self.mongopool.twit.followers.update(finddict, updatedict,\n  115:         self.mongopool.twit.mentions.find(finddict, fields).hint(hint).explain()\n  118:         self.mongopool.twit.mentions.update(finddict, updatedict, multi=True)\n  151:         self.mongopool.twit.followers_cnt.update({'_id': uuid}, update,\n\n/Users/alex/uberVU/thehole/twitter_accounts/lib/twitter_followers_writer.py:\n   27:         collection = self.mongopool.twit.followerids\n   30:         collection = self.mongopool.twit.followers\n   37:         collection = self.mongopool.twit.followers_cnt\n   40:         collection = self.mongopool.twit.followers_day_cnt\n   46:         self.mongopool.twit.followerids.insert(data)\n   86:             self.mongopool.twit.followers_day_cnt.save(today_info)\n  107:             follower = self.mongopool.twit.followers.find_one(find_dict)\n  117:                 self.mongopool.twit.followers.update(find_dict, update_dict)\n  134:         pieces = self.mongopool.twit.followerids.find(find_dict)\n  146:         yesterday_piece = list(self.mongopool.twit.followerids.find(find_dict).\\\n  156:         self.mongopool.twit.followerids.remove(remove_query, just_one=False)\n\n/Users/alex/uberVU/thehole/twitter_accounts/lib/twitter_klout_writer.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   18:         self.mongopool = MongoPool()\n   37:         self.mongopool.twit[collection].update(find_dict, update_dict, safe=True)\n   43:         self.mongopool.twit.followers.update(find, {'$set': kwargs}, upsert=True)\n\n/Users/alex/uberVU/thehole/twitter_accounts/lib/twitter_mentions.py:\n   22:         coll = self.mongopool.twit.mentions\n   39:             self.mongopool.twit.mentions.insert(mention, safe=True)\n   42:             if not self.mongopool.twit.mentions.find_one(mention):\n\n/Users/alex/uberVU/thehole/twitter_accounts/lib/twitter_retweets.py:\n   32:             if not self.mongopool.twit.usertweets.find_one(find):\n   38:             self.mongopool.twit.usertweets.update(find, update)\n\n/Users/alex/uberVU/thehole/twitter_accounts/lib/twitter_user_timeline.py:\n   22:         coll = self.mongopool.twit.usertweets\n   33:             self.mongopool.twit.usertweets.insert(usertweet, safe=True)\n\n/Users/alex/uberVU/thehole/twitter_accounts/scripts/overwrite_followers_cnt.py:\n   85:             self.mongopool.twit.followers_day_cnt.insert(today_data)\n   95:         feed = self.mongopool.misc.feeds.find_one(find_dict)\n\n/Users/alex/uberVU/thehole/twitter_accounts/scripts/overwrite_mentions.py:\n   36:         self.attribute_converter = AttributeConverter(self.mongopool)\n   49:         feed = self.mongopool.misc.feeds.find_one(find_dict)\n  132:         found = self.mongopool.twit.mentions.find_one(find_dict)\n  137:             self.mongopool.twit.mentions.insert(mention, safe=True)\n  139:             if not self.mongopool.twit.mentions.find_one(mention):\n  166:         author_info = self.mongopool.twit.followers.find_one(find_dict)\n\n/Users/alex/uberVU/thehole/twitter_accounts/scripts/purge_twitter_mentions.py:\n    6:         self.db = self.mongopool.twit.mentions\n    8:         user_ids = self.mongopool.misc.feeds.find({ 'label': 'mentions' }) \\\n\n/Users/alex/uberVU/thehole/twitter_accounts/scripts/repair_followers_analytics.py:\n   39:         self.mongopool.twit.followers_cnt.remove(remove_dict, just_one=False)\n   45:         authors = list(self.mongopool.twit.followers.find(find, fields).hint(hint))\n   49:             author = self.mongopool.twit.followers.find_one(find_dict)\n\n/Users/alex/uberVU/thehole/twitter_accounts/scripts/repair_twitter_followers_counts.py:\n   28:             today_cnt = self.mongopool.twit.followers_day_cnt.find_one(find_today)\n   29:             yesterday_cnt = self.mongopool.twit.followers_day_cnt.find_one(find_yesterday)\n   50:                 last_day = list(self.mongopool.twit.followers_day_cnt.find(find).\\\n   72:                 self.mongopool.twit.followers_day_cnt.insert(yesterday_data)\n   78:                 self.mongopool.twit.followers_day_cnt.update(find_yesterday, update_dict)\n   88:         follower_feeds = self.mongopool.misc.feeds.find({'label': 'followers'})\n\n/Users/alex/uberVU/thehole/twitter_accounts/scripts/reprocess_exposure.py:\n   27:         self.feeds = self.mongopool.misc.feeds.find({'label': 'mentions'},\n   52:                     collection=self.mongopool.twit[collection_name],\n\n/Users/alex/uberVU/thehole/twitter_accounts/scripts/validate_twitter_users.py:\n   17:         for item in self.mongopool.misc.feeds.find({'label': 'followers'}):\n\n/Users/alex/uberVU/thehole/twitter_accounts/storage/twitter_connection_events.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   22:         self.collection = MongoPool().twitter_misc.connection_events\n\n/Users/alex/uberVU/thehole/twitter_accounts/storage/twitter_user_events.py:\n    9: from core.lib.mongodb.mongopool import MongoPool\n   29:         self.collection = MongoPool().twitter_misc.user_events\n\n/Users/alex/uberVU/thehole/twitter_accounts/test/test_compute_impressions.py:\n   20:         self.mongo_collection = self.mongopool.twit[self.collection]\n\n/Users/alex/uberVU/thehole/twitter_accounts/test/test_twitter_followers.py:\n   59:         item = self.mongopool.twit.followers_day_cnt.find_one()\n   63:         chunk = self.mongopool.twit.followerids.find_one()\n\n/Users/alex/uberVU/thehole/twitter_accounts/test/test_twitter_followers_processor.py:\n  126:         today_data = self.mongopool.twit.followers_day_cnt.find_one(find_dict)\n\n/Users/alex/uberVU/thehole/twitter_accounts/test/test_twitter_users.py:\n   56:         self.assertTrue(self.mongopool.twit.followers_cnt.count() > 0,\n   60:         self.assertEqual(len(self.followers), self.mongopool.twit.followers.count(),\n   81:         initial_analytics = list(self.mongopool.twit.followers_cnt.find())\n   95:         final_analytics = list(self.mongopool.twit.followers_cnt.find())\n  104:             doc = self.mongopool.twit.followers.find_one(finddict)\n\n/Users/alex/uberVU/thehole/twitter_accounts/test/twitter_testcase.py:\n   90:         all_tweets = self.mongopool.twit[self.collection].count()\n   94:         userid_tweets = (self.mongopool\n  104:         tweets = self.mongopool.twit[self.collection].find(find_dict).count()\n  110:         follower = self.mongopool.twit.followers.find_one(followers_find)\n  117:         resource_cnt = self.mongopool.twit[self.collection].find(find_resource)\n\n/Users/alex/uberVU/thehole/twitter_streaming/lib/sitestreams_script.py:\n   27:     options = self.mongopool.misc.feeds.find_one({'label': 'mentions', 'info.screen_name': 'ubervu'})\n\n/Users/alex/uberVU/thehole/ubervu/frontend/checks.py:\n    1: from core.lib.mongodb.mongopool import MongoPool\n    7:         return 'mongo', MongoPool() is not None\n\n/Users/alex/uberVU/thehole/ubervu/frontend/migrations/0062.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   17:         mongopool = MongoPool()\n   20:         mongopool.misc.credentials.update(find_dict, update_dict, multi=True)\n\n/Users/alex/uberVU/thehole/ubervu/frontend/migrations/manual/data_migration_socialprofile_reset_at.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   17:         mongopool = MongoPool()\n   20:         mongopool.misc.credentials.update(find_dict, update_dict, multi=True)\n\n/Users/alex/uberVU/thehole/uvscripts/admin/check_ha.py:\n   19:                             socketTimeoutMS=self.mongopool._network_timeout,\n\n/Users/alex/uberVU/thehole/uvscripts/admin/feeds_next_visit_distribution.py:\n   22:         cursor = self.mongopool.misc.feeds.find(query, {'next_visit': 1})\n\n/Users/alex/uberVU/thehole/uvscripts/admin/find_zipf_threshold.py:\n    3: from core.lib.mongodb.mongopool import MongoPool\n   18:         queries = KeywordsMeta(MongoPool()).all        \n\n/Users/alex/uberVU/thehole/uvscripts/admin/generate_zipf_codes.py:\n   15:         collection = self.mongopool.misc.zipf\n   24:         collection = self.mongopool.junk.sample_tweets\n\n/Users/alex/uberVU/thehole/uvscripts/admin/keywords_per_shard.py:\n   21:         keywords_meta = KeywordsMeta(self.mongopool)\n   32:         chunks = list(self.mongopool.get_cluster('mongo-recent').config. \\\n\n/Users/alex/uberVU/thehole/uvscripts/admin/refetch_feeds.py:\n   24:         count = self.mongopool.misc.feeds.find(query).count()\n   33:         result = self.mongopool.misc.feeds.update(query, update, multi=True)\n\n/Users/alex/uberVU/thehole/uvscripts/admin/refresh_feeds.py:\n   28:         count = self.mongopool.misc.feeds.find(query).count()\n   32:         result = self.mongopool.misc.feeds.update(query, update, multi=True)\n\n/Users/alex/uberVU/thehole/uvscripts/admin/restore_mentions_from_backup.py:\n   26:         self.file_collection = self.mongopool.misc['mention_restore']\n\n/Users/alex/uberVU/thehole/uvscripts/admin/scrape_companynamesucks.py:\n   17:         self.collection = self.mongopool.classifiers.companynamesucks\n\n/Users/alex/uberVU/thehole/uvscripts/admin/scrape_short_reviews.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   25:         self.collection = self.mongopool.classifiers.shortreviews\n\n/Users/alex/uberVU/thehole/uvscripts/credentials/add_credentials.py:\n   18:             feed = self.mongopool.misc.feeds.find_one(find_dict)\n   26:             self.mongopool.misc.credentials.insert(insert_dict)\n   35:                 self.mongopool.misc.credentials.insert(new_credential)\n   57:                 self.mongopool.misc.credentials.insert(new_credential)\n\n/Users/alex/uberVU/thehole/uvscripts/credentials/move_twitter_credentials.py:\n   13:         coll = self.mongopool.misc.credentials\n\n/Users/alex/uberVU/thehole/uvscripts/lib/add_atributes.py:\n   24:         self.keywords_meta = KeywordsMeta(self.mongopool)\n   25:         self.converter = AttributeConverter(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/add_authors_information.py:\n   16:       feed = self.mongopool.misc.feeds.find_one({'label': 'mentions', 'info.user_id': author_id})\n   24:       self.mongopool.misc.credentials.insert(credentials)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/add_facebook_language.py:\n   15:         self.keywordsmeta = KeywordsMeta(self.mongopool)\n   17:         self.existing_feeds = self.mongopool.misc.feeds.find({'label': 'keywords-facebook', 'info.language': 'czech'})\n\n/Users/alex/uberVU/thehole/uvscripts/lib/add_is_retweet_field.py:\n   10:         if self.mongopool.twit.test.count() == 0:\n   11:             user_ids = self.mongopool.twit.usertweets.distinct('user_id')\n   13:                 self.mongopool.twit.test.insert({'user_id': user_id,\n   15:         self.total_tweets = self.mongopool.twit.usertweets.count()\n   19:             user = self.mongopool.twit.test.find_and_modify({'status': 'READY'},\n   25:             tweets_count = self.mongopool.twit.usertweets.find({'user_id': user_id},\n   30:             tweets = self.mongopool.twit.usertweets.find({'user_id': user_id},\n   34:                 self.mongopool.twit.usertweets.update({'_id': tweet['_id']},\n   37:             self.mongopool.twit.test.find_and_modify({'user_id': user_id},\n\n/Users/alex/uberVU/thehole/uvscripts/lib/add_syndicated_feeds.py:\n   97:         self.syndicated = self.mongopool.misc.feeds.find({'label': 'syndicated'})\n\n/Users/alex/uberVU/thehole/uvscripts/lib/aggregate_facebook.py:\n   22:     feeds = self.mongopool.misc.feeds.find({'label': 'facebookinsights'})\n   32:         if self.mongopool.facebook.insights.find_one(find_dict):\n   34:           self.mongopool.facebook.insights.update(find_dict, {'$set': {'day': day}})\n   35:           self.mongopool.facebook.insights.remove({'id': page_id, 'day': first_since}, just_one=False)\n   36:         elif self.mongopool.facebook.insights.find_one({'id': page_id, 'day': first_since}):\n   38:           self.mongopool.facebook.insights.update({'id': page_id, 'day': first_since}, {'$set': {'day': day}})\n\n/Users/alex/uberVU/thehole/uvscripts/lib/change_keyword_limit.py:\n   41:                 self.mongopool.misc.keywords.update(find_dict, update_dict)\n   42:                 self.mongopool.misc.client_keywords.update(client_find_dict, update_dict)\n   45:             new_limit_keyword = self.mongopool.misc.keywords.find_one(find_dict)['limit']\n   46:             new_limit_client = self.mongopool.misc.client_keywords.find_one(client_find_dict)['limit']\n\n/Users/alex/uberVU/thehole/uvscripts/lib/check_counts.py:\n   32:         mongospread = MongoSpread(self.mongopool)\n   33:         keywords_meta = KeywordsMeta(self.mongopool)\n   39:             feed = self.mongopool.misc.feeds.find_one({'info.keyword': keyword,\n\n/Users/alex/uberVU/thehole/uvscripts/lib/check_mentions_tineline.py:\n   25:             db = self.mongopool[dbname]\n\n/Users/alex/uberVU/thehole/uvscripts/lib/classifiers_accuracy.py:\n   27:         for entry in self.mongopool.classifiers.docs.find():\n\n/Users/alex/uberVU/thehole/uvscripts/lib/cleanup_invalid_client_keywords.py:\n  126:         raw_apikeys = self.mongopool.misc.client_keywords.find(\n  131:         clients = set(self.mongopool.misc.clients.distinct('_id'))\n  154:         return list(self.mongopool.misc.client_keywords.find(finddict).\n  182:         apikeys = self.mongopool.misc.client_keywords.find(\n  198:                 for keyword in self.mongopool.misc.keywords.find()]\n  209:         old_client_kw = self.mongopool.misc.client_keywords.find_one(\n\n/Users/alex/uberVU/thehole/uvscripts/lib/copy_feeds.py:\n    1: \"\"\" The scripts copies feeds & inserts them in mongopool.\n   17:                 self.mongopool.misc.feeds.save(feed)\n   22:                     self.mongopool.misc.feeds.save(feed)\n   24:                     self.mongopool.misc.feeds.save(feed)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/count_top_words.py:\n   55:                 self.mongopool.junk.hashtag.save(data)\n   71:         cursor = self.mongopool.junk.sample_tweets.find().limit(limit)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/delete_backend_keywords.py:\n   84:         entries = self.mongopool.misc.client_keywords.find(\n  142:         entries = self.mongopool.misc.client_keywords.find({'limit': {'$gt': 0}})\n\n/Users/alex/uberVU/thehole/uvscripts/lib/delete_backend_keywords_by_finddict.py:\n   20:         keywords = list(self.mongopool.misc.client_keywords.find(FINDDICT))\n\n/Users/alex/uberVU/thehole/uvscripts/lib/disable_intelligence.py:\n   32:         client_keywords = self.mongopool.misc.client_keywords\n   65:         clients = self.mongopool.misc.clients\n\n/Users/alex/uberVU/thehole/uvscripts/lib/edit_backend_keywords.py:\n   80:         entries = self.mongopool.misc.client_keywords.find(\n\n/Users/alex/uberVU/thehole/uvscripts/lib/edit_client.py:\n   83:         clients = self.mongopool.misc.client_keywords.find(\n   95:                 kw = list(self.mongopool.misc.client_keywords.find(\n\n/Users/alex/uberVU/thehole/uvscripts/lib/export.py:\n   69:         self.keywordsmeta = KeywordsMeta(self.mongopool)\n   70:         self.keywordslimits = KeywordsLimits(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/export_syndicated_feeds_url.py:\n   19:         self.mongopool.set_timeout(None)\n   49:             feeds = self.mongopool.misc.feeds.find({'label': 'syndicated'})\n\n/Users/alex/uberVU/thehole/uvscripts/lib/feed_refresher.py:\n   12:         self.feeds = Feeds(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/fix_counts.py:\n   21:         self.keywordsmeta = KeywordsMeta(self.mongopool)\n   22:         self.mongospread = MongoSpread(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/fix_mentions_timeline.py:\n   21:         baddb = self.mongopool['ubervu1319625467']\n\n/Users/alex/uberVU/thehole/uvscripts/lib/fix_ttl_collection.py:\n    9:         collection = self.mongopool.retweet_logs.docs\n\n/Users/alex/uberVU/thehole/uvscripts/lib/gather_mentions.py:\n    4: from core.lib.mongodb.mongopool import MongoPool\n   24:         self.mongopool = MongoPool()\n\n/Users/alex/uberVU/thehole/uvscripts/lib/generate_random_nielsen.py:\n   26:         keywordsmeta = KeywordsMeta(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/geo_stats.py:\n   74:         self.spread = MongoSpread(self.mongopool)\n   75:         self.keywords_meta = KeywordsMeta(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/giuflex.py:\n   20:     self.feeds = self.mongopool.misc.feeds.find({'label': {'$regex': '^keywords-'} }).distinct('info.keyword')\n   22:     km = KeywordsMeta(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/hashtag_word_counts.py:\n   32:         for mention in self.mongopool.tests.english_sample.find():\n   95:         self.mongopool.tests.hashtag_word_counts.save(doc)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/influencers_duplicates_remover.py:\n   14:         self.keywordsmeta = KeywordsMeta(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/keyword_statistics.py:\n   20:         keywordsmeta = KeywordsMeta(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/keywords_overlap.py:\n   15:         keywords = KeywordsMeta(self.mongopool).all\n   40:         clkws = list(self.mongopool.misc.client_keywords.find(query))\n\n/Users/alex/uberVU/thehole/uvscripts/lib/migrate_authors.py:\n   24:         for item in self.mongopool.authors.authors.find({'_id': {'$gt': last_fetched}}).limit(1000):\n\n/Users/alex/uberVU/thehole/uvscripts/lib/migrate_excluded_authors.py:\n   58:         if not self.mongopool.misc.keywords.find_one({'keyword': keyword}):\n\n/Users/alex/uberVU/thehole/uvscripts/lib/migrate_group_ids.py:\n   25:     coll = self.mongopool.misc.tagged\n\n/Users/alex/uberVU/thehole/uvscripts/lib/migrate_legacy_csv.py:\n   47:         self.stream_collection = self.mongopool.misc.migrate_legacy_csv\n\n/Users/alex/uberVU/thehole/uvscripts/lib/move_attributes.py:\n   36:         #self.mongopool.dbcrit.flattn_attributes.insert(cloud_attributes)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/recover_twitter_data.py:\n   11:         keywords_meta = KeywordsMeta(self.mongopool)\n   12:         keywords_limits = KeywordsLimits(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/redo_day_counts.py:\n   14:         self.mongopool.set_timeout(None)\n   56:                                 self.mongopool.counts.counts))\n   58:                                 self.mongopool.reach_counts.docs))\n   63:                                     self.mongopool.day_counts.docs))\n   68:                                     self.mongopool.hour_counts.docs))\n\n/Users/alex/uberVU/thehole/uvscripts/lib/remove_raven_googleplus_feeds.py:\n   28:                 self.mongopool.misc.feeds.remove({'label': 'google-plus',\n\n/Users/alex/uberVU/thehole/uvscripts/lib/remove_wild_facebook_feeds.py:\n   13:         for feed in self.mongopool.misc.feeds.find({'label': 'keywords-facebook'},\n   17:                 # self.mongopool.misc.feeds.remove({'_id': feed['_id']})\n\n/Users/alex/uberVU/thehole/uvscripts/lib/remove_youtube_duplicates.py:\n   17:     self.mongopool.set_timeout(None)\n   24:     for feed in self.mongopool.misc.client_sources.find():\n\n/Users/alex/uberVU/thehole/uvscripts/lib/repair_authors_location.py:\n   17:         for item in self.mongopool.authors.docs.find():\n\n/Users/alex/uberVU/thehole/uvscripts/lib/repair_feeds.py:\n   11:         keywordsmeta = KeywordsMeta(self.mongopool)\n   25:             keyword_feeds = self.mongopool.misc.feeds.find({'info.keyword': keyword})\n   45:             self.mongopool.misc.keywords.remove(find_dict)\n   47:             client = self.mongopool.misc.client_keywords.find_one(find_dict)\n\n/Users/alex/uberVU/thehole/uvscripts/lib/replay_keyword_history.py:\n   13:         for doc in self.mongopool.misc.keywords_history.find(\n\n/Users/alex/uberVU/thehole/uvscripts/lib/resource_breakdown.py:\n  218:         client_keywords = self.mongopool.misc.client_keywords.find(finddict)\n  229:                 for keyword in self.mongopool.misc.keywords.find({'limit': {'$gt': 0}})]\n  343:         client_keywords = self.mongopool.misc.client_keywords.find(finddict)\n  415:         for client_keyword in self.mongopool.misc.client_keywords.find(finddict):\n\n/Users/alex/uberVU/thehole/uvscripts/lib/sitestreams.py:\n   50:     options = self.mongopool.misc.feeds.find_one({'label': 'mentions', 'info.screen_name': 'ubervu'})\n\n/Users/alex/uberVU/thehole/uvscripts/lib/sitestreams_sitebucket.py:\n   16:         options = self.mongopool.misc.feeds.find_one({'label': 'mentions', 'info.screen_name': 'ubervu'})\n\n/Users/alex/uberVU/thehole/uvscripts/lib/stream_rule_backwards_compatible.py:\n    6: 	collection = self.mongopool.misc.keywords\n\n/Users/alex/uberVU/thehole/uvscripts/lib/update_stream_impressions.py:\n   15:         tweets = self.mongopool.twit.usertweets.find({'user_id': user_id})\n   43:             self.mongopool.twit.usertweets.update(find_dict, update_dict,\n\n/Users/alex/uberVU/thehole/uvscripts/staging/clean_staging_feeds.py:\n   23:         for feed in self.mongopool.misc.feeds.find():\n   29:                 self.mongopool.misc.feeds.remove({'_id': feed['_id']})\n\n/Users/alex/uberVU/thehole/uvscripts/staging/clean_staging_keywords.py:\n   35:         for keyword in self.mongopool.misc.client_keywords.find():\n\n/Users/alex/uberVU/thehole/uvscripts/statistics/gather_keywords.py:\n   20:         km = KeywordsMeta(self.mongopool)\n\n/Users/alex/uberVU/thehole/uvscripts/statistics/keywords_estimated_volume.py:\n   48:         keywords = list(KeywordsMeta(self.mongopool).all)\n\n/Users/alex/uberVU/thehole/uvscripts/test/test_remove_raven_googleplus_feeds.py:\n   41:             self.mongopool.misc.feeds.insert({'label': 'google-plus',\n   52:             self.mongopool.misc.feeds.find_one({'info.keyword': 'android'}))\n   55:         self.assertEqual(2, self.mongopool.misc.feeds.count())\n\n1016 matches across 282 files\n",
			"settings":
			{
				"buffer_size": 78411,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/core/lib/documents_buffer.py",
			"settings":
			{
				"buffer_size": 4682,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/clients/semantria/lib/ubvu_session.py",
			"settings":
			{
				"buffer_size": 2789,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/mentions/lib/semantria_sentiment_detector.py",
			"settings":
			{
				"buffer_size": 5815,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/docs/dokuwiki/backend/writing_modules.md",
			"settings":
			{
				"buffer_size": 8037,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/aggregator/test/test_flusher.py",
			"settings":
			{
				"buffer_size": 2562,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/mentions/README.md",
			"settings":
			{
				"buffer_size": 2534,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/controllers/replayer.py",
			"settings":
			{
				"buffer_size": 2011,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/mentions/lib/semantria_failsafe.py",
			"settings":
			{
				"buffer_size": 539,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/alex/uberVU/thehole/core/constants/sentiment.py",
			"settings":
			{
				"buffer_size": 229,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 49.0,
		"selected_items":
		[
			[
				"install pack",
				"Package Control: Install Package"
			],
			[
				"blame",
				"Git: Blame"
			],
			[
				"view ",
				"GitHub: View"
			],
			[
				"view",
				"GitHub: View"
			],
			[
				"github",
				"GitHub: View"
			],
			[
				"show",
				"SublimeLinter: Show All Errors"
			],
			[
				"lint",
				"SublimeLinter: Lint This View"
			],
			[
				"lint mo",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"show ",
				"SublimeLinter: Show All Errors"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"json",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"linth",
				"SublimeLinter: Lint This View"
			],
			[
				"show al",
				"SublimeLinter: Show All Errors"
			],
			[
				"histo",
				"GitHub: History"
			],
			[
				"prett",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"show all",
				"SublimeLinter: Show All Errors"
			],
			[
				"gith",
				"GitHub: View"
			],
			[
				"pretty",
				"Pretty JSON: Minify (compress) JSON"
			],
			[
				"linter",
				"SublimeLinter: Show All Errors"
			],
			[
				"lint th",
				"SublimeLinter: Lint This View"
			],
			[
				"lint mode",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"pret",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"com",
				"Coffee: Toggle Watch Mode"
			],
			[
				"comp",
				"Coffee: Compile File"
			],
			[
				"show l",
				"SublimeLinter: Show All Errors"
			],
			[
				"cop",
				"Copy File Name"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"lintmode",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"choo",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"choose",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"lintermo",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"copy",
				"Copy File Name"
			],
			[
				"copyfi",
				"Copy File Name"
			],
			[
				"showl",
				"SublimeLinter: Show All Errors"
			],
			[
				"linterv",
				"SublimeLinter: Lint This View"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"compi",
				"Coffee: Compile File"
			],
			[
				"cofeejava",
				"Coffee: Display JavaScript"
			],
			[
				"coffee",
				"Coffee: Display JavaScript"
			],
			[
				"compile",
				"Coffee: Compile File"
			],
			[
				"lint m",
				"SublimeLinter: Choose Lint Mode"
			],
			[
				"githubopen",
				"GitHub: Open Remote URL in Browser"
			],
			[
				"dup",
				"File: Duplicate"
			],
			[
				"lith",
				"SublimeLinter: Lint This View"
			],
			[
				"lin",
				"SublimeLinter: Lint This View"
			],
			[
				"installp",
				"Package Control: Install Package"
			],
			[
				"bla",
				"Git: Blame"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"show er",
				"SublimeLinter: Show All Errors"
			],
			[
				"githu",
				"GitHub: View"
			],
			[
				"add",
				"Git: Add Current File"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git add",
				"Git: Add Current File"
			],
			[
				"lint this",
				"SublimeLinter: Lint This View"
			],
			[
				"lint view",
				"SublimeLinter: Lint This View"
			],
			[
				"lintv",
				"SublimeLinter: Lint This View"
			],
			[
				"lintview",
				"SublimeLinter: Lint This View"
			],
			[
				"prefs",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"prefslinterdefa",
				"Preferences: SublimeLinter Settings – Default"
			],
			[
				"prefslinter",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"remove pa",
				"Package Control: Remove Package"
			],
			[
				"remove pack",
				"Package Control: Remove Package"
			],
			[
				"packe list",
				"Package Control: List Packages"
			],
			[
				"remove p",
				"Package Control: Remove Package"
			],
			[
				"enable",
				"SublimeLinter: Enable Linter"
			],
			[
				"enable li",
				"SublimeLinter: Disable Linter"
			],
			[
				"removepa",
				"Package Control: Remove Package"
			],
			[
				"removep",
				"Package Control: Remove Package"
			],
			[
				"disable",
				"SublimeLinter: Disable Linter"
			],
			[
				"enablelint",
				"SublimeLinter: Disable Linter"
			],
			[
				"prefslint",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"packages",
				"Package Control: List Packages"
			],
			[
				"linters",
				"Preferences: SublimeLinter Settings – Default"
			],
			[
				"linterto",
				"SublimeLinter: Toggle Linter"
			],
			[
				"remove pac",
				"Package Control: Remove Package"
			],
			[
				"LIST ERROR",
				"SublimeLinter: Show All Errors"
			],
			[
				"LINT",
				"SublimeLinter: Lint This View"
			],
			[
				"linte",
				"SublimeLinter: Disable Linter"
			],
			[
				"prefssbu",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"enable p",
				"Package Control: Enable Package"
			],
			[
				"errors",
				"SublimeLinter: Show All Errors"
			],
			[
				"prefssubl",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"prefssub",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"toggl li",
				"SublimeLinter: Toggle Linter"
			],
			[
				"toggle linte",
				"SublimeLinter: Toggle Linter"
			],
			[
				"prefss",
				"Preferences: SublimeLinter Settings – Default"
			],
			[
				"linter debu",
				"SublimeLinter: Enable Debug Mode"
			],
			[
				"coffee li",
				"Coffee: Lint"
			],
			[
				"watch",
				"Coffee: Toggle Watch Mode"
			],
			[
				"destro",
				"Origami: Destroy Current Pane"
			],
			[
				"coffe",
				"Coffee: Quick Run Bar"
			],
			[
				"run sele",
				"Coffee: Run Script / Selection"
			],
			[
				"co",
				"Coffee: Check Syntax"
			],
			[
				"quick",
				"Git: Quick Commit"
			],
			[
				"commit",
				"Git: Quick Commit"
			],
			[
				"comm",
				"Git: Commit"
			],
			[
				"amme",
				"Git: Amend Commit"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"package",
				"Preferences: Package Control Settings – User"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"cofeescript",
				"Coffee: Run Script / Selection"
			],
			[
				"cofee",
				"Coffee: Run Cake Task"
			],
			[
				"Package Control: list",
				"Package Control: List Packages"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"packages l",
				"Package Control: List Packages"
			],
			[
				"git file",
				"Git: Diff Current File"
			],
			[
				"git histor",
				"Git: Commit history"
			],
			[
				"github histo",
				"GitHub: History"
			],
			[
				"git history",
				"GitHub: History"
			],
			[
				"git histo",
				"GitHub: History"
			],
			[
				"git commit",
				"Git: Commit history"
			],
			[
				"git branch",
				"Git: Change Branch"
			],
			[
				"package remo",
				"Package Control: Remove Package"
			],
			[
				"github blam",
				"GitHub: Blame"
			],
			[
				"githubina",
				"GitHubinator Blame"
			],
			[
				"github open",
				"GitHub: Open Gist in Browser"
			],
			[
				"gitgutter",
				"GitGutter: Show Comparing Against"
			],
			[
				"git sta",
				"Git: Diff Staged"
			],
			[
				"git",
				"Git: Status"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"origami destro",
				"Origami: Destroy Current Pane"
			],
			[
				"origamileft",
				"Origami: Create Pane on the Left"
			],
			[
				"github bla",
				"GitHub: Blame"
			],
			[
				"githuv",
				"GitHub: View"
			],
			[
				"search",
				"File: Search Files"
			]
		],
		"width": 549.0
	},
	"console":
	{
		"height": 430.0,
		"history":
		[
			"sublime linter",
			"import django",
			"random.randint(0,2)",
			"import random",
			"random.randint(0,2)",
			"__main__",
			"__name__",
			"print PATH",
			"PATH",
			"ls",
			"which python",
			"2 + 3",
			"python",
			"pip --version",
			"pip list",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/alex/uberVU/thehole/clients/semantria/semantria_api_client.py",
		"/Users/alex/uberVU/thehole/mentions/lib/semantria_sentiment_detector.py",
		"/Users/alex/uberVU/thehole/app/templates/slider_editor.hjs",
		"/Users/alex/uberVU/thehole/core/settings.py",
		"/Users/alex/uberVU/thehole/mentions/test/test_semantria_sentiment_detector.py",
		"/Users/alex/uberVU/thehole/clients/semantria/lib/ubvu_session.py",
		"/Users/alex/uberVU/thehole/core/lib/graphite/reporter.py",
		"/Users/alex/uberVU/thehole/email_alerts/scripts/render_email.py",
		"/Users/alex/uberVU/thehole/README.md",
		"/Users/alex/uberVU/thehole/intelligence/test/test_series_eviction_strategy.py",
		"/Users/alex/uberVU/thehole/core/ubvu-development.yml",
		"/Users/alex/uberVU/thehole/app/docs/documenting_code.md",
		"/Users/alex/uberVU/thehole/data_acquisition/lib/daq_omgili_processor.py",
		"/Users/alex/uberVU/thehole/mentions/lib/detector.py",
		"/Users/alex/uberVU/thehole/docs/dokuwiki/backend/modules.md",
		"/Users/alex/uberVU/thehole/ubvushell.py",
		"/Users/alex/uberVU/thehole/controllers/README.md",
		"/Users/alex/uberVU/thehole/mentions/lib/semantria_failsafe.py",
		"/Users/alex/uberVU/thehole/controllers/replayer.py",
		"/Users/alex/uberVU/thehole/core/lib/documents_buffer.py",
		"/Users/alex/uberVU/thehole/controllers/producer.py",
		"/Users/alex/uberVU/thehole/controllers/base_pipeline_controller.py",
		"/Users/alex/uberVU/thehole/core/constants/sentiment.py",
		"/Users/alex/uberVU/thehole/controllers/buffered_consumer.py",
		"/Users/alex/logs_updated.txt",
		"/Users/alex/uberVU/thehole/app/templates/demo_tour.hjs",
		"/Users/alex/uberVU/thehole/core/test/daq_testcase.py",
		"/Users/alex/uberVU/thehole/core/lib/graphite/__init__.py",
		"/Users/alex/uberVU/thehole/core/lib/graphite/periodicreporter.py",
		"/Users/alex/uberVU/thehole/api/app/graphite.py",
		"/Users/alex/uberVU/thehole/twitter_streaming/hbc/hbc-core/src/main/java/com/twitter/hbc/core/StatsReporter.java",
		"/Users/alex/uberVU/thehole/twitter_streaming/hbc/hbc-core/src/test/java/com/twitter/hbc/StatsReporterTest.java",
		"/Users/alex/uberVU/thehole/ubervu/api/resources/report_default_templates_resource.py",
		"/Users/alex/uberVU/thehole/ubervu/api/resources/report_widget_resource.py",
		"/Users/alex/uberVU/thehole/core/lib/graphite/modulereporter.py",
		"/Users/alex/uberVU/thehole/models/report/report.py",
		"/Users/alex/uberVU/thehole/app/constants/reports.coffee",
		"/Users/alex/uberVU/thehole/app/templates/reports/reports-page.hjs",
		"/Users/alex/uberVU/thehole/app/core/module.coffee",
		"/Users/alex/uberVU/thehole/app/conf/modules.json",
		"/Users/alex/uberVU/thehole/app/core/modal_window.coffee",
		"/Users/alex/uberVU/thehole/app/docs/mixpanel.md",
		"/Users/alex/uberVU/thehole/core/lib/mongodb/mongopool.py",
		"/Users/alex/uberVU/thehole/mentions/lib/mentions_matcher.py",
		"/Users/alex/uberVU/thehole/core/test/graphite_mock.py",
		"/Users/alex/uberVU/thehole/Gruntfile.coffee",
		"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/Queue.py",
		"/Users/alex/uberVU/thehole/clients/apikeys.py",
		"/Users/alex/uberVU/thehole/core/lib/graphite/README.md",
		"/Users/alex/uberVU/thehole/mentions/README.md",
		"/Users/alex/uberVU/thehole/app/templates/mention/signal.hjs",
		"/Users/alex/uberVU/thehole/mentions/lib/mentions_writer.py",
		"/Users/alex/uberVU/thehole/mentions/lib/mentions_dropper.py",
		"/Users/alex/uberVU/thehole/app/main.js",
		"/Users/alex/uberVU/thehole/data_acquisition/scripts/add_platform.py",
		"/Users/alex/uberVU/thehole/mongomodels/client_streams/client_streams.py",
		"/Users/alex/uberVU/thehole/dash/templates/clients_history.html",
		"/Users/alex/uberVU/thehole/githubscripts/client.py",
		"/Users/alex/uberVU/thehole/app/cs-live.js",
		"/Users/alex/uberVU/thehole/docs/infrastructure/cyclops.md",
		"/Users/alex/uberVU/thehole/mentions/lib/sentiment_detector.py",
		"/Users/alex/uberVU/thehole/app/templates/mention/signals/extended_influencer.hjs",
		"/Users/alex/uberVU/thehole/models/mention/__init__.py",
		"/Users/alex/uberVU/thehole/models/mention/mention_recipes.py",
		"/Users/alex/uberVU/thehole/cyclops/autoscaling/clear_stale_hosts.py",
		"/Users/alex/uberVU/thehole/controllers/base_controller.py",
		"/Users/alex/uberVU/thehole/ubervu/frontend/migrations/manual/update_field_whitelabel_platform_tokens.py",
		"/Users/alex/uberVU/thehole/app/templates/analytics/demographics_state_manager.hjs",
		"/Users/alex/uberVU/thehole/controllers/consumer.py",
		"/Users/alex/uberVU/thehole/data_acquisition/lib/daq_twitter.py",
		"/Users/alex/uberVU/thehole/data_acquisition/lib/daq_facebook.py",
		"/Users/alex/uberVU/thehole/core/lib/daq_facade.py",
		"/Users/alex/uberVU/thehole/controllers/data_acquisition.py",
		"/Users/alex/uberVU/thehole/controllers/daq_producer.py",
		"/Users/alex/uberVU/thehole/uvscripts/lib/debug_quota_manager.py",
		"/Users/alex/uberVU/thehole/clients/test/test_semantria_api_client.py",
		"/Users/alex/uberVU/thehole/app/conf/test_modules.json",
		"/Users/alex/uberVU/thehole/app/tester.js",
		"/Users/alex/uberVU/thehole/api/scripts/test_externalapi.py",
		"/Users/alex/uberVU/thehole/ubervu/terrain.py",
		"/Users/alex/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/alex/uberVU/thehole/core/lib/send_mail.py",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/mentions-processing.yml",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/mentions-analytics.yml",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/facebook-accounts.yml",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/mentions-daq.yml",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/mentions-intelligence.yml",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/twitter-accounts.yml",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/google-plus-accounts.yml",
		"/Users/alex/uberVU/thehole/cyclops/settings_local.py.example",
		"/Users/alex/uberVU/thehole/cyclops/deploy/test/fixtures/completed.json",
		"/Users/alex/uberVU/thehole/cyclops/deploy/helpers/system.py",
		"/Users/alex/uberVU/thehole/cyclops/deploy/configs/templates/program.conf",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/email-alerts.yml",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/frontend.yml",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/admin.yml",
		"/Users/alex/uberVU/thehole/cyclops/deploy/modules/streaming.yml",
		"/Users/alex/uberVU/thehole/app/artifacts.yml",
		"/Users/alex/uberVU/thehole/docs/integrations/youtube.md",
		"/Users/alex/uberVU/thehole/data_acquisition/lib/youtubefetcher.py",
		"/Users/alex/uberVU/thehole/core/configuration/languages/yiddish-utf.lm",
		"/Users/alex/uberVU/thehole/core/lib/mongodb/document/mention2.py",
		"/Users/alex/uberVU/thehole/core/lib/mention_storage.py",
		"/Users/alex/uberVU/thehole/email_alerts/mentions_realtime_digest.py",
		"/Users/alex/uberVU/thehole/cyclops/README.md",
		"/Users/alex/uberVU/thehole/docs/infrastructure/deleting_mentions.md",
		"/Users/alex/uberVU/thehole/app/templates/reports/sentiment_meter.hjs",
		"/Users/alex/uberVU/thehole/core/lib/sentiment_annotator.py",
		"/Users/alex/uberVU/thehole/core/test/kestrel_mock.py",
		"/Users/alex/uberVU/thehole/core/README.md",
		"/Users/alex/uberVU/thehole/ubervu/install/README.md",
		"/Users/alex/uberVU/thehole/app/core/channels_operations.coffee",
		"/Users/alex/uberVU/thehole/core/__init__.py",
		"/Users/alex/uberVU/thehole/app/conf/core_modules.json",
		"/Users/alex/uberVU/thehole/core/lib/tagcloud/collocation_resource.py",
		"/Users/alex/uberVU/thehole/app/modules/editors/metric_editor.coffee",
		"/Users/alex/uberVU/thehole/package.json",
		"/Users/alex/uberVU/thehole/mentions/config/mentions-writer.prod.yml",
		"/Users/alex/uberVU/thehole/core/lib/mention_backup.py",
		"/Users/alex/uberVU/thehole/app/templates/mention/mention_action_bar.hjs",
		"/Users/alex/uberVU/thehole/docs/infrastructure/instances.md",
		"/Users/alex/uberVU/thehole/core/test/decorators/test_instrument_task.py",
		"/Users/alex/uberVU/thehole/app/templates/reports/instant_new_report_action.hjs",
		"/Users/alex/uberVU/thehole/issues.csv",
		"/Users/alex/uberVU/thehole/docs/product/analytics/README.md",
		"/Users/alex/uberVU/thehole/docs/product/ads/README.md",
		"/Users/alex/uberVU/thehole/docs/integrations/gnip/README.md",
		"/Users/alex/uberVU/thehole/core/test/httpretty_mocks/README.md"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"*.md, *.py",
			"*.md",
			"*.py",
			"*.md",
			"*.py",
			"*.md",
			"*.py",
			"*.yml",
			"*.md",
			"*.py",
			"semantria_api_client.py",
			"*.md",
			"*.py",
			"semantria_api_client.py",
			"*.py",
			"semantria_api_client.py",
			"*.py",
			"*.md",
			"*.py",
			"*.md",
			"*.coffee, *.js, *.py, *.json",
			"*.coffee, *.js, *.py",
			"*.coffee, *.js",
			"coffee",
			"",
			"*.js, *.coffee",
			"",
			"*.coffee",
			"*.py",
			"*.js, *coffee",
			"*.coffee, *.css",
			"*.coffee",
			"*.py",
			"*.coffee, *.js, *.json",
			"*.coffee, *.js",
			"*.coffee",
			"*.py",
			"*.md",
			"*.py",
			"",
			"*.coffee, *.js",
			"*.coffee",
			"test*.coffee",
			"*.coffee",
			"*.coffee, *.js",
			"*.json, *.coffee, *.js",
			"*.json, *.coffee",
			"*.json",
			"*.coffee",
			"*.py",
			"*.coffee",
			"",
			"urls.js",
			"",
			"*.coffee, *.hjs, *.css, *.js",
			"*.coffee, *.hjs, *.css",
			"*.coffee, *.hjs",
			"*.coffee",
			"*.css",
			"*.coffee, *.hjs, *.json, *.css",
			"*.coffee, *.hjs, *.json",
			"*.coffee, *.hjs",
			"*.py",
			"*.coffee, *.hjs",
			"*.coffee",
			"*.py",
			"",
			"*.yml",
			"*.py",
			"*.yml",
			"*.md",
			"*.coffee, *.js, *.hjs",
			"*.coffee, *.js",
			"*.coffee",
			"*.py",
			"*.css",
			"*.py",
			"*.coffee",
			"*.md",
			"*.coffee, *.js",
			"*.coffee",
			"*.py",
			"",
			"test_account_resource.py",
			"*.py",
			"processed_signals.py",
			"*.py",
			"*.md",
			"*.py",
			"*.coffee, *.hjs",
			"*.coffee",
			"*.js",
			"*.coffee",
			"*.hjs",
			"*.coffee",
			"*form.coffee",
			"*.coffee",
			"model*",
			"model*coffee",
			"*.coffee",
			"*.js",
			"*.coffee",
			"",
			"*.coffee",
			"*.hjs",
			"*.coffee, *.js, *.py, *.hjs",
			"*.coffee, *.js, *.py",
			"*.coffee, *.js",
			"*.coffee",
			"*.hjs",
			"*.coffee, *.hjs, *.js, *.css",
			"*.coffee, *.hjs, *.js",
			"*.coffee, *.hjs",
			"*.coffee",
			"*.py",
			"*.coffee, *.hjs",
			"*.coffee",
			"*.py",
			"test_current_resource.py",
			"*.py",
			"test_current_resource.py",
			"*.py",
			"*.css",
			"*.py, *.coffee",
			"*.py",
			"00*.py",
			"*.md",
			"*.py"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"mongopool",
			"buffer",
			"mongopool",
			"buffer",
			"mongopool",
			"collections.",
			".collections.",
			"buffer",
			"mongo",
			"BufferedConsumer",
			"buffer",
			"kestrel",
			"get_queue_size",
			"def get_queues",
			"kestrel",
			"send_to_semantria",
			"test_semantria",
			"batch_consume",
			"# logger",
			"logger.debu",
			"def enqueue",
			"GraphitePeriodicReporter",
			"logger",
			"enqueue",
			"GraphiteReporter",
			"add_sentiment",
			"semantria",
			"graphite_reporter",
			"logger.debug",
			"logger.log",
			"consumer",
			"logger = logging.getLogger(__name__)",
			"logger.",
			"logger.get",
			"logger",
			"logger.log",
			"self.logger",
			"enqueue",
			"MentionFactory",
			"semantria",
			"semantr",
			"semantria",
			"mention",
			"check_graphite_is_stable",
			"semantria",
			"sentiment",
			"send_to_semantria",
			"-r",
			"-R",
			"cyclops",
			"get_queue_size",
			"_conn",
			"neutral",
			"_get_sem",
			"SemantriaSentimentDetector",
			"semantria",
			"neutral",
			"semantria",
			"_resolveError",
			"_process_return_code",
			"add_handler",
			"_process_responses",
			"add_sentiment",
			"pdb",
			"add_sentiment",
			"_safe_run",
			"batch_con",
			"add_sentiment",
			"pdb",
			"pd",
			"add_sentiment",
			"find_and_remove",
			"mentions_enqueued",
			"call_results",
			"pdb",
			"add_sentiment",
			"pdb",
			"feedbacm",
			"send_batch_with_auto_response",
			"send_with_auto_response",
			"queue",
			"_runRequest",
			"pdb",
			"semantria_response_size",
			"SemantriaSentimentDetector",
			"sessionect",
			"_conn",
			"SEMANTRIA_LANGUAGES",
			"_connect",
			"number_of_mentions_sent",
			"semantria_response_size",
			"ddocsa",
			"_conn",
			"queueDocument",
			"def addmetric",
			"failsafe",
			"semantria-failsafe",
			"connect",
			"_conn",
			"SemantriaApiClient",
			"SEMANTRIA_LANGUAGES",
			"Chinese",
			"Mandarin",
			"_connect",
			"SemantriaApiClient",
			"_Request",
			"queueDocument",
			"        \"\"\"Queue four mentions (one in each language) twice and make sure we\nqueueDocument",
			"ids_to_langs.keys",
			"pdb",
			"getLanguageId",
			"queueDocument",
			"pdb",
			"_process_responses",
			"_process_return_code",
			"send_with_auto_response",
			"_process_responses",
			"sentiment",
			"getLanguageId",
			"Portu",
			"size",
			"href",
			"embed",
			"twitter",
			"_get_semantria_language",
			"SEMANTRIA_LANGUAGES",
			"Language not supported",
			"'Chinese'"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"session",
			"_connect",
			"session",
			"conn",
			"mozaic",
			"'.mozaic-container':",
			"\".mozaic-container\"",
			"$('.mozaic')",
			"master_b",
			"master_a",
			"keyword_id",
			"keyword",
			"self.params",
			"resource_url",
			"",
			"decorated-widget-board-actions",
			".inline-form",
			".widget-pin_board_widget_form"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/alex/uberVU/thehole/docs/infrastructure/backend.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6998,
						"regions":
						{
						},
						"selection":
						[
							[
								1396,
								1401
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 166.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/alex/uberVU/thehole/docs/testing/run_backend_tests.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6835,
						"regions":
						{
						},
						"selection":
						[
							[
								3535,
								3573
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2666.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 78411,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										108,
										117
									],
									[
										125,
										134
									],
									[
										146,
										155
									],
									[
										158,
										167
									],
									[
										209,
										218
									],
									[
										313,
										322
									],
									[
										361,
										370
									],
									[
										419,
										428
									],
									[
										465,
										474
									],
									[
										637,
										646
									],
									[
										727,
										736
									],
									[
										875,
										884
									],
									[
										948,
										957
									],
									[
										1092,
										1101
									],
									[
										1179,
										1188
									],
									[
										1269,
										1278
									],
									[
										1405,
										1414
									],
									[
										1478,
										1487
									],
									[
										1598,
										1607
									],
									[
										1752,
										1761
									],
									[
										1840,
										1849
									],
									[
										1980,
										1989
									],
									[
										2048,
										2057
									],
									[
										2138,
										2147
									],
									[
										2195,
										2204
									],
									[
										2273,
										2282
									],
									[
										2344,
										2353
									],
									[
										2410,
										2419
									],
									[
										2488,
										2497
									],
									[
										2619,
										2628
									],
									[
										2654,
										2663
									],
									[
										2819,
										2828
									],
									[
										2844,
										2853
									],
									[
										2902,
										2911
									],
									[
										3074,
										3083
									],
									[
										3096,
										3105
									],
									[
										3273,
										3282
									],
									[
										3307,
										3316
									],
									[
										3448,
										3457
									],
									[
										3485,
										3494
									],
									[
										3556,
										3565
									],
									[
										3714,
										3723
									],
									[
										3755,
										3764
									],
									[
										3910,
										3919
									],
									[
										3944,
										3953
									],
									[
										4104,
										4113
									],
									[
										4161,
										4170
									],
									[
										4313,
										4322
									],
									[
										4347,
										4356
									],
									[
										4504,
										4513
									],
									[
										4561,
										4570
									],
									[
										4709,
										4718
									],
									[
										4766,
										4775
									],
									[
										4840,
										4849
									],
									[
										4987,
										4996
									],
									[
										5044,
										5053
									],
									[
										5189,
										5198
									],
									[
										5236,
										5245
									],
									[
										5388,
										5397
									],
									[
										5405,
										5414
									],
									[
										5424,
										5433
									],
									[
										5441,
										5450
									],
									[
										5474,
										5483
									],
									[
										5565,
										5574
									],
									[
										5577,
										5586
									],
									[
										5596,
										5605
									],
									[
										5640,
										5649
									],
									[
										5686,
										5695
									],
									[
										5746,
										5755
									],
									[
										5777,
										5786
									],
									[
										5827,
										5836
									],
									[
										5884,
										5893
									],
									[
										5975,
										5984
									],
									[
										6085,
										6094
									],
									[
										6106,
										6115
									],
									[
										6177,
										6186
									],
									[
										6234,
										6243
									],
									[
										6323,
										6332
									],
									[
										6403,
										6412
									],
									[
										6476,
										6485
									],
									[
										6550,
										6559
									],
									[
										6612,
										6621
									],
									[
										6709,
										6718
									],
									[
										6845,
										6854
									],
									[
										6862,
										6871
									],
									[
										6892,
										6901
									],
									[
										6904,
										6913
									],
									[
										6924,
										6933
									],
									[
										7003,
										7012
									],
									[
										7067,
										7076
									],
									[
										7209,
										7218
									],
									[
										7263,
										7272
									],
									[
										7398,
										7407
									],
									[
										7428,
										7437
									],
									[
										7492,
										7501
									],
									[
										7553,
										7562
									],
									[
										7699,
										7708
									],
									[
										7729,
										7738
									],
									[
										7859,
										7868
									],
									[
										7889,
										7898
									],
									[
										7994,
										8003
									],
									[
										8092,
										8101
									],
									[
										8109,
										8118
									],
									[
										8147,
										8156
									],
									[
										8222,
										8231
									],
									[
										8312,
										8321
									],
									[
										8350,
										8359
									],
									[
										8516,
										8525
									],
									[
										8572,
										8581
									],
									[
										8657,
										8666
									],
									[
										8739,
										8748
									],
									[
										8831,
										8840
									],
									[
										8914,
										8923
									],
									[
										8975,
										8984
									],
									[
										9055,
										9064
									],
									[
										9137,
										9146
									],
									[
										9212,
										9221
									],
									[
										9291,
										9300
									],
									[
										9371,
										9380
									],
									[
										9451,
										9460
									],
									[
										9552,
										9561
									],
									[
										9639,
										9648
									],
									[
										9722,
										9731
									],
									[
										9812,
										9821
									],
									[
										9925,
										9934
									],
									[
										10121,
										10130
									],
									[
										10168,
										10177
									],
									[
										10251,
										10260
									],
									[
										10325,
										10334
									],
									[
										10402,
										10411
									],
									[
										10579,
										10588
									],
									[
										10610,
										10619
									],
									[
										10681,
										10690
									],
									[
										10752,
										10761
									],
									[
										10823,
										10832
									],
									[
										10915,
										10924
									],
									[
										10982,
										10991
									],
									[
										11067,
										11076
									],
									[
										11138,
										11147
									],
									[
										11214,
										11223
									],
									[
										11268,
										11277
									],
									[
										11351,
										11360
									],
									[
										11420,
										11429
									],
									[
										11473,
										11482
									],
									[
										11563,
										11572
									],
									[
										11714,
										11723
									],
									[
										11773,
										11782
									],
									[
										11926,
										11935
									],
									[
										12055,
										12064
									],
									[
										12150,
										12159
									],
									[
										12228,
										12237
									],
									[
										12385,
										12394
									],
									[
										12441,
										12450
									],
									[
										12572,
										12581
									],
									[
										12707,
										12716
									],
									[
										12767,
										12776
									],
									[
										12863,
										12872
									],
									[
										12880,
										12889
									],
									[
										12981,
										12990
									],
									[
										12998,
										13007
									],
									[
										13028,
										13037
									],
									[
										13040,
										13049
									],
									[
										13059,
										13068
									],
									[
										13141,
										13150
									],
									[
										13208,
										13217
									],
									[
										13303,
										13312
									],
									[
										13363,
										13372
									],
									[
										13514,
										13523
									],
									[
										13580,
										13589
									],
									[
										13731,
										13740
									],
									[
										13852,
										13861
									],
									[
										13950,
										13959
									],
									[
										13989,
										13998
									],
									[
										14111,
										14120
									],
									[
										14222,
										14231
									],
									[
										14239,
										14248
									],
									[
										14288,
										14297
									],
									[
										14394,
										14403
									],
									[
										14411,
										14420
									],
									[
										14432,
										14441
									],
									[
										14444,
										14453
									],
									[
										14482,
										14491
									],
									[
										14536,
										14545
									],
									[
										14686,
										14695
									],
									[
										14703,
										14712
									],
									[
										14746,
										14755
									],
									[
										14857,
										14866
									],
									[
										14874,
										14883
									],
									[
										14921,
										14930
									],
									[
										15022,
										15031
									],
									[
										15039,
										15048
									],
									[
										15079,
										15088
									],
									[
										15117,
										15126
									],
									[
										15147,
										15156
									],
									[
										15159,
										15168
									],
									[
										15192,
										15201
									],
									[
										15235,
										15244
									],
									[
										15247,
										15256
									],
									[
										15287,
										15296
									],
									[
										15358,
										15367
									],
									[
										15434,
										15443
									],
									[
										15512,
										15521
									],
									[
										15570,
										15579
									],
									[
										15644,
										15653
									],
									[
										15714,
										15723
									],
									[
										15840,
										15849
									],
									[
										15857,
										15866
									],
									[
										15887,
										15896
									],
									[
										15899,
										15908
									],
									[
										15969,
										15978
									],
									[
										16066,
										16075
									],
									[
										16083,
										16092
									],
									[
										16113,
										16122
									],
									[
										16125,
										16134
									],
									[
										16169,
										16178
									],
									[
										16231,
										16240
									],
									[
										16330,
										16339
									],
									[
										16382,
										16391
									],
									[
										16399,
										16408
									],
									[
										16429,
										16438
									],
									[
										16441,
										16450
									],
									[
										16473,
										16482
									],
									[
										16591,
										16600
									],
									[
										16608,
										16617
									],
									[
										16653,
										16662
									],
									[
										16688,
										16697
									],
									[
										16700,
										16709
									],
									[
										16745,
										16754
									],
									[
										16853,
										16862
									],
									[
										16870,
										16879
									],
									[
										16891,
										16900
									],
									[
										16903,
										16912
									],
									[
										16964,
										16973
									],
									[
										17086,
										17095
									],
									[
										17103,
										17112
									],
									[
										17133,
										17142
									],
									[
										17145,
										17154
									],
									[
										17189,
										17198
									],
									[
										17313,
										17322
									],
									[
										17330,
										17339
									],
									[
										17367,
										17376
									],
									[
										17473,
										17482
									],
									[
										17490,
										17499
									],
									[
										17520,
										17529
									],
									[
										17532,
										17541
									],
									[
										17592,
										17601
									],
									[
										17638,
										17647
									],
									[
										17717,
										17726
									],
									[
										17784,
										17793
									],
									[
										17851,
										17860
									],
									[
										17917,
										17926
									],
									[
										18032,
										18041
									],
									[
										18091,
										18100
									],
									[
										18224,
										18233
									],
									[
										18241,
										18250
									],
									[
										18284,
										18293
									],
									[
										18414,
										18423
									],
									[
										18431,
										18440
									],
									[
										18471,
										18480
									],
									[
										18512,
										18521
									],
									[
										18542,
										18551
									],
									[
										18554,
										18563
									],
									[
										18586,
										18595
									],
									[
										18598,
										18607
									],
									[
										18641,
										18650
									],
									[
										18721,
										18730
									],
									[
										18798,
										18807
									],
									[
										18909,
										18918
									],
									[
										18926,
										18935
									],
									[
										19004,
										19013
									],
									[
										19038,
										19047
									],
									[
										19050,
										19059
									],
									[
										19090,
										19099
									],
									[
										19158,
										19167
									],
									[
										19170,
										19179
									],
									[
										19229,
										19238
									],
									[
										19340,
										19349
									],
									[
										19383,
										19392
									],
									[
										19490,
										19499
									],
									[
										19519,
										19528
									],
									[
										19552,
										19561
									],
									[
										19594,
										19603
									],
									[
										19682,
										19691
									],
									[
										19753,
										19762
									],
									[
										19771,
										19780
									],
									[
										19876,
										19885
									],
									[
										19893,
										19902
									],
									[
										19933,
										19942
									],
									[
										19968,
										19977
									],
									[
										20006,
										20015
									],
									[
										20018,
										20027
									],
									[
										20090,
										20099
									],
									[
										20159,
										20168
									],
									[
										20247,
										20256
									],
									[
										20314,
										20323
									],
									[
										20369,
										20378
									],
									[
										20439,
										20448
									],
									[
										20511,
										20520
									],
									[
										20609,
										20618
									],
									[
										20626,
										20635
									],
									[
										20666,
										20675
									],
									[
										20740,
										20749
									],
									[
										20754,
										20763
									],
									[
										20817,
										20826
									],
									[
										20877,
										20886
									],
									[
										20915,
										20924
									],
									[
										20927,
										20936
									],
									[
										20972,
										20981
									],
									[
										20983,
										20992
									],
									[
										21040,
										21049
									],
									[
										21110,
										21119
									],
									[
										21183,
										21192
									],
									[
										21291,
										21300
									],
									[
										21308,
										21317
									],
									[
										21338,
										21347
									],
									[
										21350,
										21359
									],
									[
										21389,
										21398
									],
									[
										21452,
										21461
									],
									[
										21533,
										21542
									],
									[
										21724,
										21733
									],
									[
										21810,
										21819
									],
									[
										21922,
										21931
									],
									[
										21939,
										21948
									],
									[
										21969,
										21978
									],
									[
										21981,
										21990
									],
									[
										22031,
										22040
									],
									[
										22191,
										22200
									],
									[
										22208,
										22217
									],
									[
										22238,
										22247
									],
									[
										22250,
										22259
									],
									[
										22294,
										22303
									],
									[
										22409,
										22418
									],
									[
										22426,
										22435
									],
									[
										22456,
										22465
									],
									[
										22468,
										22477
									],
									[
										22507,
										22516
									],
									[
										22552,
										22561
									],
									[
										22657,
										22666
									],
									[
										22674,
										22683
									],
									[
										22695,
										22704
									],
									[
										22707,
										22716
									],
									[
										22761,
										22770
									],
									[
										22872,
										22881
									],
									[
										22889,
										22898
									],
									[
										22920,
										22929
									],
									[
										22976,
										22985
									],
									[
										23020,
										23029
									],
									[
										23032,
										23041
									],
									[
										23055,
										23064
									],
									[
										23098,
										23107
									],
									[
										23207,
										23216
									],
									[
										23224,
										23233
									],
									[
										23254,
										23263
									],
									[
										23266,
										23275
									],
									[
										23301,
										23310
									],
									[
										23367,
										23376
									],
									[
										23433,
										23442
									],
									[
										23511,
										23520
									],
									[
										23573,
										23582
									],
									[
										23647,
										23656
									],
									[
										23713,
										23722
									],
									[
										23875,
										23884
									],
									[
										24011,
										24020
									],
									[
										24147,
										24156
									],
									[
										24268,
										24277
									],
									[
										24444,
										24453
									],
									[
										24609,
										24618
									],
									[
										24663,
										24672
									],
									[
										24745,
										24754
									],
									[
										24811,
										24820
									],
									[
										24897,
										24906
									],
									[
										24985,
										24994
									],
									[
										25073,
										25082
									],
									[
										25235,
										25244
									],
									[
										25277,
										25286
									],
									[
										25344,
										25353
									],
									[
										25482,
										25491
									],
									[
										25529,
										25538
									],
									[
										25595,
										25604
									],
									[
										25749,
										25758
									],
									[
										25874,
										25883
									],
									[
										26062,
										26071
									],
									[
										26148,
										26157
									],
									[
										26271,
										26280
									],
									[
										26288,
										26297
									],
									[
										26318,
										26327
									],
									[
										26330,
										26339
									],
									[
										26349,
										26358
									],
									[
										26456,
										26465
									],
									[
										26473,
										26482
									],
									[
										26527,
										26536
									],
									[
										26581,
										26590
									],
									[
										26593,
										26602
									],
									[
										26643,
										26652
									],
									[
										26717,
										26726
									],
									[
										26759,
										26768
									],
									[
										26800,
										26809
									],
									[
										26868,
										26877
									],
									[
										26934,
										26943
									],
									[
										26994,
										27003
									],
									[
										27057,
										27066
									],
									[
										27078,
										27087
									],
									[
										27132,
										27141
									],
									[
										27201,
										27210
									],
									[
										27275,
										27284
									],
									[
										27336,
										27345
									],
									[
										27376,
										27385
									],
									[
										27433,
										27442
									],
									[
										27479,
										27488
									],
									[
										27527,
										27536
									],
									[
										27598,
										27607
									],
									[
										27626,
										27635
									],
									[
										27668,
										27677
									],
									[
										27733,
										27742
									],
									[
										27745,
										27754
									],
									[
										27810,
										27819
									],
									[
										27849,
										27858
									],
									[
										27912,
										27921
									],
									[
										27969,
										27978
									],
									[
										28042,
										28051
									],
									[
										28099,
										28108
									],
									[
										28140,
										28149
									],
									[
										28181,
										28190
									],
									[
										28239,
										28248
									],
									[
										28296,
										28305
									],
									[
										28352,
										28361
									],
									[
										28422,
										28431
									],
									[
										28562,
										28571
									],
									[
										28579,
										28588
									],
									[
										28601,
										28610
									],
									[
										28635,
										28644
									],
									[
										28698,
										28707
									],
									[
										28716,
										28725
									],
									[
										28786,
										28795
									],
									[
										28866,
										28875
									],
									[
										29010,
										29019
									],
									[
										29055,
										29064
									],
									[
										29148,
										29157
									],
									[
										29278,
										29287
									],
									[
										29295,
										29304
									],
									[
										29312,
										29321
									],
									[
										29347,
										29356
									],
									[
										29391,
										29400
									],
									[
										29475,
										29484
									],
									[
										29546,
										29555
									],
									[
										29558,
										29567
									],
									[
										29576,
										29585
									],
									[
										29634,
										29643
									],
									[
										29715,
										29724
									],
									[
										29771,
										29780
									],
									[
										29892,
										29901
									],
									[
										29980,
										29989
									],
									[
										29997,
										30006
									],
									[
										30020,
										30029
									],
									[
										30054,
										30063
									],
									[
										30066,
										30075
									],
									[
										30115,
										30124
									],
									[
										30236,
										30245
									],
									[
										30253,
										30262
									],
									[
										30278,
										30287
									],
									[
										30290,
										30299
									],
									[
										30335,
										30344
									],
									[
										30456,
										30465
									],
									[
										30473,
										30482
									],
									[
										30498,
										30507
									],
									[
										30510,
										30519
									],
									[
										30567,
										30576
									],
									[
										30607,
										30616
									],
									[
										30644,
										30653
									],
									[
										30737,
										30746
									],
									[
										30871,
										30880
									],
									[
										30888,
										30897
									],
									[
										30917,
										30926
									],
									[
										30946,
										30955
									],
									[
										31036,
										31045
									],
									[
										31053,
										31062
									],
									[
										31074,
										31083
									],
									[
										31086,
										31095
									],
									[
										31125,
										31134
									],
									[
										31274,
										31283
									],
									[
										31334,
										31343
									],
									[
										31507,
										31516
									],
									[
										31549,
										31558
									],
									[
										31700,
										31709
									],
									[
										31890,
										31899
									],
									[
										32058,
										32067
									],
									[
										32219,
										32228
									],
									[
										32295,
										32304
									],
									[
										32375,
										32384
									],
									[
										32444,
										32453
									],
									[
										32511,
										32520
									],
									[
										32582,
										32591
									],
									[
										32633,
										32642
									],
									[
										32714,
										32723
									],
									[
										32797,
										32806
									],
									[
										32877,
										32886
									],
									[
										32976,
										32985
									],
									[
										33027,
										33036
									],
									[
										33189,
										33198
									],
									[
										33269,
										33278
									],
									[
										33345,
										33354
									],
									[
										33425,
										33434
									],
									[
										33494,
										33503
									],
									[
										33554,
										33563
									],
									[
										33649,
										33658
									],
									[
										33700,
										33709
									],
									[
										33792,
										33801
									],
									[
										33847,
										33856
									],
									[
										33930,
										33939
									],
									[
										34010,
										34019
									],
									[
										34108,
										34117
									],
									[
										34196,
										34205
									],
									[
										34266,
										34275
									],
									[
										34325,
										34334
									],
									[
										34451,
										34460
									],
									[
										34600,
										34609
									],
									[
										34734,
										34743
									],
									[
										34889,
										34898
									],
									[
										34961,
										34970
									],
									[
										35119,
										35128
									],
									[
										35256,
										35265
									],
									[
										35348,
										35357
									],
									[
										35497,
										35506
									],
									[
										35567,
										35576
									],
									[
										35703,
										35712
									],
									[
										35776,
										35785
									],
									[
										35854,
										35863
									],
									[
										35913,
										35922
									],
									[
										36025,
										36034
									],
									[
										36131,
										36140
									],
									[
										36234,
										36243
									],
									[
										36266,
										36275
									],
									[
										36302,
										36311
									],
									[
										36341,
										36350
									],
									[
										36380,
										36389
									],
									[
										36419,
										36428
									],
									[
										36455,
										36464
									],
									[
										36494,
										36503
									],
									[
										36526,
										36535
									],
									[
										36564,
										36573
									],
									[
										36596,
										36605
									],
									[
										36630,
										36639
									],
									[
										36663,
										36672
									],
									[
										36685,
										36694
									],
									[
										36726,
										36735
									],
									[
										36753,
										36762
									],
									[
										36797,
										36806
									],
									[
										36829,
										36838
									],
									[
										36856,
										36865
									],
									[
										36891,
										36900
									],
									[
										36926,
										36935
									],
									[
										36980,
										36989
									],
									[
										37018,
										37027
									],
									[
										37056,
										37065
									],
									[
										37091,
										37100
									],
									[
										37124,
										37133
									],
									[
										37164,
										37173
									],
									[
										37197,
										37206
									],
									[
										37231,
										37240
									],
									[
										37264,
										37273
									],
									[
										37299,
										37308
									],
									[
										37320,
										37329
									],
									[
										37341,
										37350
									],
									[
										37467,
										37476
									],
									[
										37533,
										37542
									],
									[
										37586,
										37595
									],
									[
										37726,
										37735
									],
									[
										38040,
										38049
									],
									[
										38199,
										38208
									],
									[
										38269,
										38278
									],
									[
										38352,
										38361
									],
									[
										38467,
										38476
									],
									[
										38537,
										38546
									],
									[
										38666,
										38675
									],
									[
										38732,
										38741
									],
									[
										38822,
										38831
									],
									[
										38895,
										38904
									],
									[
										39007,
										39016
									],
									[
										39108,
										39117
									],
									[
										39185,
										39194
									],
									[
										39351,
										39360
									],
									[
										39495,
										39504
									],
									[
										39644,
										39653
									],
									[
										39661,
										39670
									],
									[
										39691,
										39700
									],
									[
										39703,
										39712
									],
									[
										39735,
										39744
									],
									[
										39818,
										39827
									],
									[
										39901,
										39910
									],
									[
										39987,
										39996
									],
									[
										40070,
										40079
									],
									[
										40155,
										40164
									],
									[
										40224,
										40233
									],
									[
										40314,
										40323
									],
									[
										40385,
										40394
									],
									[
										40454,
										40463
									],
									[
										40530,
										40539
									],
									[
										40610,
										40619
									],
									[
										40697,
										40706
									],
									[
										40860,
										40869
									],
									[
										40903,
										40912
									],
									[
										41054,
										41063
									],
									[
										41134,
										41143
									],
									[
										41211,
										41220
									],
									[
										41291,
										41300
									],
									[
										41445,
										41454
									],
									[
										41545,
										41554
									],
									[
										41616,
										41625
									],
									[
										41800,
										41809
									],
									[
										41847,
										41856
									],
									[
										41995,
										42004
									],
									[
										42077,
										42086
									],
									[
										42142,
										42151
									],
									[
										42307,
										42316
									],
									[
										42449,
										42458
									],
									[
										42518,
										42527
									],
									[
										42663,
										42672
									],
									[
										42733,
										42742
									],
									[
										42876,
										42885
									],
									[
										42948,
										42957
									],
									[
										43090,
										43099
									],
									[
										43156,
										43165
									],
									[
										43222,
										43231
									],
									[
										43288,
										43297
									],
									[
										43365,
										43374
									],
									[
										43429,
										43438
									],
									[
										43496,
										43505
									],
									[
										43645,
										43654
									],
									[
										43662,
										43671
									],
									[
										43698,
										43707
									],
									[
										43746,
										43755
									],
									[
										43758,
										43767
									],
									[
										43813,
										43822
									],
									[
										43949,
										43958
									],
									[
										43966,
										43975
									],
									[
										44002,
										44011
									],
									[
										44057,
										44066
									],
									[
										44104,
										44113
									],
									[
										44116,
										44125
									],
									[
										44167,
										44176
									],
									[
										44236,
										44245
									],
									[
										44386,
										44395
									],
									[
										44509,
										44518
									],
									[
										44634,
										44643
									],
									[
										44760,
										44769
									],
									[
										44866,
										44875
									],
									[
										44924,
										44933
									],
									[
										45009,
										45018
									],
									[
										45143,
										45152
									],
									[
										45281,
										45290
									],
									[
										45362,
										45371
									],
									[
										45487,
										45496
									],
									[
										45549,
										45558
									],
									[
										45611,
										45620
									],
									[
										45764,
										45773
									],
									[
										45820,
										45829
									],
									[
										45884,
										45893
									],
									[
										46023,
										46032
									],
									[
										46040,
										46049
									],
									[
										46070,
										46079
									],
									[
										46212,
										46221
									],
									[
										46229,
										46238
									],
									[
										46350,
										46359
									],
									[
										46367,
										46376
									],
									[
										46397,
										46406
									],
									[
										46409,
										46418
									],
									[
										46464,
										46473
									],
									[
										46596,
										46605
									],
									[
										46613,
										46622
									],
									[
										46641,
										46650
									],
									[
										46710,
										46719
									],
									[
										46742,
										46751
									],
									[
										46754,
										46763
									],
									[
										46787,
										46796
									],
									[
										46944,
										46953
									],
									[
										47014,
										47023
									],
									[
										47148,
										47157
									],
									[
										47204,
										47213
									],
									[
										47326,
										47335
									],
									[
										47410,
										47419
									],
									[
										47535,
										47544
									],
									[
										47686,
										47695
									],
									[
										47849,
										47858
									],
									[
										47921,
										47930
									],
									[
										48084,
										48093
									],
									[
										48130,
										48139
									],
									[
										48275,
										48284
									],
									[
										48445,
										48454
									],
									[
										48593,
										48602
									],
									[
										48642,
										48651
									],
									[
										48788,
										48797
									],
									[
										48921,
										48930
									],
									[
										48993,
										49002
									],
									[
										49147,
										49156
									],
									[
										49307,
										49316
									],
									[
										49379,
										49388
									],
									[
										49455,
										49464
									],
									[
										49577,
										49586
									],
									[
										49594,
										49603
									],
									[
										49626,
										49635
									],
									[
										49742,
										49751
									],
									[
										49855,
										49864
									],
									[
										49872,
										49881
									],
									[
										49897,
										49906
									],
									[
										49971,
										49980
									],
									[
										49983,
										49992
									],
									[
										50023,
										50032
									],
									[
										50065,
										50074
									],
									[
										50077,
										50086
									],
									[
										50171,
										50180
									],
									[
										50188,
										50197
									],
									[
										50222,
										50231
									],
									[
										50338,
										50347
									],
									[
										50355,
										50364
									],
									[
										50384,
										50393
									],
									[
										50396,
										50405
									],
									[
										50446,
										50455
									],
									[
										50501,
										50510
									],
									[
										50653,
										50662
									],
									[
										50758,
										50767
									],
									[
										50830,
										50839
									],
									[
										50975,
										50984
									],
									[
										51130,
										51139
									],
									[
										51186,
										51195
									],
									[
										51298,
										51307
									],
									[
										51363,
										51372
									],
									[
										51436,
										51445
									],
									[
										51582,
										51591
									],
									[
										51599,
										51608
									],
									[
										51624,
										51633
									],
									[
										51636,
										51645
									],
									[
										51663,
										51672
									],
									[
										51835,
										51844
									],
									[
										51852,
										51861
									],
									[
										51897,
										51906
									],
									[
										52023,
										52032
									],
									[
										52151,
										52160
									],
									[
										52168,
										52177
									],
									[
										52293,
										52302
									],
									[
										52368,
										52377
									],
									[
										52443,
										52452
									],
									[
										52526,
										52535
									],
									[
										52658,
										52667
									],
									[
										52822,
										52831
									],
									[
										52912,
										52921
									],
									[
										52972,
										52981
									],
									[
										53116,
										53125
									],
									[
										53133,
										53142
									],
									[
										53163,
										53172
									],
									[
										53175,
										53184
									],
									[
										53218,
										53227
									],
									[
										53378,
										53387
									],
									[
										53395,
										53404
									],
									[
										53425,
										53434
									],
									[
										53437,
										53446
									],
									[
										53469,
										53478
									],
									[
										53530,
										53539
									],
									[
										53657,
										53666
									],
									[
										53718,
										53727
									],
									[
										53854,
										53863
									],
									[
										53983,
										53992
									],
									[
										54021,
										54030
									],
									[
										54092,
										54101
									],
									[
										54233,
										54242
									],
									[
										54304,
										54313
									],
									[
										54437,
										54446
									],
									[
										54569,
										54578
									],
									[
										54630,
										54639
									],
									[
										54750,
										54759
									],
									[
										54912,
										54921
									],
									[
										55086,
										55095
									],
									[
										55213,
										55222
									],
									[
										55282,
										55291
									],
									[
										55359,
										55368
									],
									[
										55407,
										55416
									],
									[
										55473,
										55482
									],
									[
										55611,
										55620
									],
									[
										55628,
										55637
									],
									[
										55649,
										55658
									],
									[
										55820,
										55829
									],
									[
										55837,
										55846
									],
									[
										55867,
										55876
									],
									[
										55879,
										55888
									],
									[
										55957,
										55966
									],
									[
										56073,
										56082
									],
									[
										56090,
										56099
									],
									[
										56120,
										56129
									],
									[
										56132,
										56141
									],
									[
										56186,
										56195
									],
									[
										56253,
										56262
									],
									[
										56339,
										56348
									],
									[
										56413,
										56422
									],
									[
										56523,
										56532
									],
									[
										56595,
										56604
									],
									[
										56686,
										56695
									],
									[
										56760,
										56769
									],
									[
										56848,
										56857
									],
									[
										56933,
										56942
									],
									[
										57103,
										57112
									],
									[
										57163,
										57172
									],
									[
										57221,
										57230
									],
									[
										57283,
										57292
									],
									[
										57336,
										57345
									],
									[
										57400,
										57409
									],
									[
										57485,
										57494
									],
									[
										57558,
										57567
									],
									[
										57643,
										57652
									],
									[
										57729,
										57738
									],
									[
										57794,
										57803
									],
									[
										57961,
										57970
									],
									[
										57978,
										57987
									],
									[
										58008,
										58017
									],
									[
										58020,
										58029
									],
									[
										58052,
										58061
									],
									[
										58141,
										58150
									],
									[
										58307,
										58316
									],
									[
										58355,
										58364
									],
									[
										58437,
										58446
									],
									[
										58581,
										58590
									],
									[
										58647,
										58656
									],
									[
										58796,
										58805
									],
									[
										58846,
										58855
									],
									[
										59006,
										59015
									],
									[
										59085,
										59094
									],
									[
										59268,
										59277
									],
									[
										59306,
										59315
									],
									[
										59375,
										59384
									],
									[
										59443,
										59452
									],
									[
										59525,
										59534
									],
									[
										59602,
										59611
									],
									[
										59757,
										59766
									],
									[
										59812,
										59821
									],
									[
										59969,
										59978
									],
									[
										60069,
										60078
									],
									[
										60158,
										60167
									],
									[
										60328,
										60337
									],
									[
										60422,
										60431
									],
									[
										60524,
										60533
									],
									[
										60598,
										60607
									],
									[
										60682,
										60691
									],
									[
										60788,
										60797
									],
									[
										60947,
										60956
									],
									[
										61039,
										61048
									],
									[
										61184,
										61193
									],
									[
										61347,
										61356
									],
									[
										61364,
										61373
									],
									[
										61407,
										61416
									],
									[
										61556,
										61565
									],
									[
										61573,
										61582
									],
									[
										61616,
										61625
									],
									[
										61776,
										61785
									],
									[
										61912,
										61921
									],
									[
										61984,
										61993
									],
									[
										62142,
										62151
									],
									[
										62304,
										62313
									],
									[
										62404,
										62413
									],
									[
										62483,
										62492
									],
									[
										62563,
										62572
									],
									[
										62630,
										62639
									],
									[
										62778,
										62787
									],
									[
										62855,
										62864
									],
									[
										62894,
										62903
									],
									[
										62981,
										62990
									],
									[
										63066,
										63075
									],
									[
										63217,
										63226
									],
									[
										63384,
										63393
									],
									[
										63401,
										63410
									],
									[
										63442,
										63451
									],
									[
										63559,
										63568
									],
									[
										63576,
										63585
									],
									[
										63601,
										63610
									],
									[
										63613,
										63622
									],
									[
										63640,
										63649
									],
									[
										63843,
										63852
									],
									[
										63860,
										63869
									],
									[
										63885,
										63894
									],
									[
										63897,
										63906
									],
									[
										63924,
										63933
									],
									[
										64107,
										64116
									],
									[
										64242,
										64251
									],
									[
										64391,
										64400
									],
									[
										64408,
										64417
									],
									[
										64456,
										64465
									],
									[
										64582,
										64591
									],
									[
										64635,
										64644
									],
									[
										64780,
										64789
									],
									[
										64825,
										64834
									],
									[
										64963,
										64972
									],
									[
										65033,
										65042
									],
									[
										65178,
										65187
									],
									[
										65248,
										65257
									],
									[
										65423,
										65432
									],
									[
										65567,
										65576
									],
									[
										65704,
										65713
									],
									[
										65721,
										65730
									],
									[
										65769,
										65778
									],
									[
										65905,
										65914
									],
									[
										65970,
										65979
									],
									[
										66045,
										66054
									],
									[
										66123,
										66132
									],
									[
										66279,
										66288
									],
									[
										66420,
										66429
									],
									[
										66487,
										66496
									],
									[
										66593,
										66602
									],
									[
										66691,
										66700
									],
									[
										66859,
										66868
									],
									[
										66912,
										66921
									],
									[
										67086,
										67095
									],
									[
										67155,
										67164
									],
									[
										67229,
										67238
									],
									[
										67317,
										67326
									],
									[
										67382,
										67391
									],
									[
										67478,
										67487
									],
									[
										67564,
										67573
									],
									[
										67645,
										67654
									],
									[
										67725,
										67734
									],
									[
										67888,
										67897
									],
									[
										68028,
										68037
									],
									[
										68108,
										68117
									],
									[
										68179,
										68188
									],
									[
										68271,
										68280
									],
									[
										68384,
										68393
									],
									[
										68481,
										68490
									],
									[
										68672,
										68681
									],
									[
										68755,
										68764
									],
									[
										68868,
										68877
									],
									[
										68964,
										68973
									],
									[
										69136,
										69145
									],
									[
										69196,
										69205
									],
									[
										69238,
										69247
									],
									[
										69393,
										69402
									],
									[
										69511,
										69520
									],
									[
										69658,
										69667
									],
									[
										69729,
										69738
									],
									[
										69801,
										69810
									],
									[
										69878,
										69887
									],
									[
										69958,
										69967
									],
									[
										70026,
										70035
									],
									[
										70178,
										70187
									],
									[
										70217,
										70226
									],
									[
										70281,
										70290
									],
									[
										70345,
										70354
									],
									[
										70467,
										70476
									],
									[
										70530,
										70539
									],
									[
										70679,
										70688
									],
									[
										70746,
										70755
									],
									[
										70923,
										70932
									],
									[
										71075,
										71084
									],
									[
										71136,
										71145
									],
									[
										71257,
										71266
									],
									[
										71382,
										71391
									],
									[
										71457,
										71466
									],
									[
										71600,
										71609
									],
									[
										71668,
										71677
									],
									[
										71773,
										71782
									],
									[
										71833,
										71842
									],
									[
										71984,
										71993
									],
									[
										72105,
										72114
									],
									[
										72167,
										72176
									],
									[
										72274,
										72283
									],
									[
										72402,
										72411
									],
									[
										72521,
										72530
									],
									[
										72538,
										72547
									],
									[
										72568,
										72577
									],
									[
										72580,
										72589
									],
									[
										72710,
										72719
									],
									[
										72823,
										72832
									],
									[
										72888,
										72897
									],
									[
										72982,
										72991
									],
									[
										73105,
										73114
									],
									[
										73217,
										73226
									],
									[
										73276,
										73285
									],
									[
										73452,
										73461
									],
									[
										73576,
										73585
									],
									[
										73694,
										73703
									],
									[
										73742,
										73751
									],
									[
										73880,
										73889
									],
									[
										74054,
										74063
									],
									[
										74197,
										74206
									],
									[
										74329,
										74338
									],
									[
										74446,
										74455
									],
									[
										74622,
										74631
									],
									[
										74686,
										74695
									],
									[
										74779,
										74788
									],
									[
										74851,
										74860
									],
									[
										74921,
										74930
									],
									[
										74999,
										75008
									],
									[
										75075,
										75084
									],
									[
										75208,
										75217
									],
									[
										75366,
										75375
									],
									[
										75454,
										75463
									],
									[
										75592,
										75601
									],
									[
										75648,
										75657
									],
									[
										75788,
										75797
									],
									[
										75926,
										75935
									],
									[
										75977,
										75986
									],
									[
										76054,
										76063
									],
									[
										76129,
										76138
									],
									[
										76280,
										76289
									],
									[
										76421,
										76430
									],
									[
										76510,
										76519
									],
									[
										76601,
										76610
									],
									[
										76689,
										76698
									],
									[
										76820,
										76829
									],
									[
										77002,
										77011
									],
									[
										77190,
										77199
									],
									[
										77315,
										77324
									],
									[
										77392,
										77401
									],
									[
										77551,
										77560
									],
									[
										77608,
										77617
									],
									[
										77766,
										77775
									],
									[
										77912,
										77921
									],
									[
										78051,
										78060
									],
									[
										78173,
										78182
									],
									[
										78250,
										78259
									],
									[
										78350,
										78359
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								14646,
								14652
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": false,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": false,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"sublime_auto_complete": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3661.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/alex/uberVU/thehole/core/lib/documents_buffer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4682,
						"regions":
						{
						},
						"selection":
						[
							[
								1023,
								1023
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/alex/uberVU/thehole/clients/semantria/lib/ubvu_session.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2789,
						"regions":
						{
						},
						"selection":
						[
							[
								448,
								448
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": false,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": false,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"history_list_is_closing": true,
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/alex/uberVU/thehole/mentions/lib/semantria_sentiment_detector.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5815,
						"regions":
						{
						},
						"selection":
						[
							[
								1382,
								1382
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": false,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": false,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"history_list_is_closing": true,
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 390.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Users/alex/uberVU/thehole/docs/dokuwiki/backend/writing_modules.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8037,
						"regions":
						{
						},
						"selection":
						[
							[
								7561,
								7561
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2501.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/alex/uberVU/thehole/aggregator/test/test_flusher.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2562,
						"regions":
						{
						},
						"selection":
						[
							[
								1853,
								1862
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": false,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": false,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 146.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/Users/alex/uberVU/thehole/mentions/README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2534,
						"regions":
						{
						},
						"selection":
						[
							[
								1020,
								1020
							]
						],
						"settings":
						{
							"syntax": "Packages/Markdown/Markdown.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				}
			]
		},
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 9,
					"file": "/Users/alex/uberVU/thehole/controllers/replayer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2011,
						"regions":
						{
						},
						"selection":
						[
							[
								1309,
								1324
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/Users/alex/uberVU/thehole/mentions/lib/semantria_failsafe.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 539,
						"regions":
						{
						},
						"selection":
						[
							[
								130,
								130
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": false,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": false,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/Users/alex/uberVU/thehole/core/constants/sentiment.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 229,
						"regions":
						{
						},
						"selection":
						[
							[
								212,
								227
							]
						],
						"settings":
						{
							"codeintel": true,
							"codeintel_config":
							{
								"JavaScript":
								{
									"codeintel_max_recursive_dir_depth": 2,
									"codeintel_scan_files_in_project": false,
									"javascriptExtraPaths":
									[
									]
								},
								"PHP":
								{
									"codeintel_max_recursive_dir_depth": 5,
									"codeintel_scan_files_in_project": false,
									"phpExtraPaths":
									[
									]
								},
								"Python":
								{
									"env":
									{
									}
								}
							},
							"codeintel_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_live": false,
							"codeintel_live_enabled_languages":
							[
								"JavaScript",
								"Mason",
								"XBL",
								"XUL",
								"RHTML",
								"SCSS",
								"Python",
								"HTML",
								"Ruby",
								"Python3",
								"XML",
								"Sass",
								"XSLT",
								"Django",
								"HTML5",
								"Perl",
								"CSS",
								"Twig",
								"Less",
								"Smarty",
								"Node.js",
								"Tcl",
								"TemplateToolkit",
								"PHP"
							],
							"codeintel_max_recursive_dir_depth": 10,
							"codeintel_scan_exclude_dir":
							{
								"JavaScript":
								[
									"/build/",
									"/min/"
								]
							},
							"codeintel_scan_files_in_project": true,
							"codeintel_selected_catalogs":
							[
								"jQuery",
								"Rails"
							],
							"codeintel_snippets": false,
							"codeintel_syntax_map":
							{
								"Python Django": "Python"
							},
							"codeintel_tooltips": "popup",
							"sublime_auto_complete": true,
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 29.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.48646010586,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 165.0
	},
	"output.find_results":
	{
		"height": 100.0
	},
	"output.git":
	{
		"height": 91.0
	},
	"project": "thehole.sublime-project",
	"replace":
	{
		"height": 54.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"semantriafa",
				"mentions/lib/semantria_failsafe.py"
			],
			[
				"repla",
				"controllers/replayer.py"
			],
			[
				"semantr",
				"mentions/lib/semantria_sentiment_detector.py"
			],
			[
				"sessio",
				"clients/semantria/lib/ubvu_session.py"
			],
			[
				"documentsb",
				"core/lib/documents_buffer.py"
			],
			[
				"ubvush",
				"ubvushell.py"
			],
			[
				"semantri",
				"mentions/lib/semantria_sentiment_detector.py"
			],
			[
				"detect",
				"mentions/lib/detector.py"
			],
			[
				"detec",
				"mentions/lib/detector.py"
			],
			[
				"detector",
				"mentions/lib/detector.py"
			],
			[
				"ubvu_se",
				"clients/semantria/lib/ubvu_session.py"
			],
			[
				"reporter",
				"core/lib/graphite/reporter.py"
			],
			[
				"modulerepo",
				"core/lib/graphite/modulereporter.py"
			],
			[
				"graphitereport",
				"core/lib/graphite/reporter.py"
			],
			[
				"mentions/readm",
				"mentions/README.md"
			],
			[
				"semantriaapiclient",
				"clients/semantria/semantria_api_client.py"
			],
			[
				"apike",
				"clients/apikeys.py"
			],
			[
				"semantria_sen",
				"mentions/lib/semantria_sentiment_detector.py"
			],
			[
				"daqfa",
				"data_acquisition/lib/daq_facebook.py"
			],
			[
				"daqtw",
				"data_acquisition/lib/daq_twitter.py"
			],
			[
				"mentionswr",
				"mentions/lib/mentions_writer.py"
			],
			[
				"test_seman",
				"mentions/test/test_semantria_sentiment_detector.py"
			],
			[
				"semantria_se",
				"mentions/lib/semantria_sentiment_detector.py"
			],
			[
				"semantria_",
				"clients/semantria/semantria_api_client.py"
			],
			[
				"cyclopsyml",
				"cyclops/deploy/modules/mentions-analytics.yml"
			],
			[
				"cyclop",
				"docs/infrastructure/cyclops.md"
			],
			[
				"detecto",
				"mentions/lib/detector.py"
			],
			[
				"mentions_wri",
				"mentions/lib/mentions_writer.py"
			],
			[
				"semantria_fa",
				"mentions/lib/semantria_failsafe.py"
			],
			[
				"core/rea",
				"core/README.md"
			],
			[
				"core/",
				"core/README.md"
			],
			[
				"mentionsdro",
				"mentions/lib/mentions_dropper.py"
			],
			[
				"install",
				"ubervu/install/README.md"
			],
			[
				"test_semantr",
				"mentions/test/test_semantria_sentiment_detector.py"
			],
			[
				"test_semantria_se",
				"mentions/test/test_semantria_sentiment_detector.py"
			],
			[
				"semantria",
				"clients/semantria/semantria_api_client.py"
			],
			[
				"semantria_a",
				"clients/semantria/semantria_api_client.py"
			],
			[
				"installread",
				"ubervu/install/README.md"
			],
			[
				"backend",
				"uvscripts/tests_suite/backend_tests.yml"
			],
			[
				"test_semantria",
				"mentions/test/test_semantria_sentiment_detector.py"
			],
			[
				"semantriase",
				"mentions/lib/semantria_sentiment_detector.py"
			],
			[
				"test_semantri",
				"mentions/test/test_semantria_sentiment_detector.py"
			],
			[
				"ubvuse",
				"clients/semantria/lib/ubvu_session.py"
			],
			[
				"test_sem",
				"clients/test/test_semantria_api_client.py"
			],
			[
				"failsa",
				"mentions/lib/semantria_failsafe.py"
			],
			[
				"run_har",
				"ubervu/run_harvest.py"
			],
			[
				"api",
				"clients/apikeys.py"
			],
			[
				"test_sen",
				"mentions/test/test_semantria_sentiment_detector.py"
			],
			[
				"test_semantria_",
				"clients/test/test_semantria_api_client.py"
			],
			[
				"semantriap",
				"clients/semantria/semantria_api_client.py"
			],
			[
				"cyclopsread",
				"cyclops/README.md"
			],
			[
				"cyclops",
				"docs/infrastructure/cyclops.md"
			],
			[
				"dete",
				"mentions/lib/detector.py"
			],
			[
				"mentions_bu",
				"mentions/lib/helpers/mentions_buffer.py"
			],
			[
				"semantria_sentiment_detector.py",
				"mentions/lib/semantria_sentiment_detector.py"
			],
			[
				"sentimentex",
				"core/lib/sentiment/extractor.py"
			],
			[
				"mentionsmath",
				"mentions/lib/mentions_matcher.py"
			],
			[
				"controller.md",
				"api/app/controllers/metrics/README.md"
			],
			[
				"sentiment_de",
				"mentions/lib/sentiment_detector.py"
			],
			[
				"clientsapi",
				"clients/apikeys.py"
			],
			[
				"sentiment",
				"core/lib/sentiment_annotator.py"
			],
			[
				"convey",
				"ubervu/frontend/tests/unit/jelly/test_convert_result.py"
			],
			[
				"backend_tests",
				"uvscripts/tests_suite/backend_tests.yml"
			],
			[
				"test_sentim",
				"mentions/test/test_semantria_sentiment_detector.py"
			],
			[
				"ubvu_",
				"clients/semantria/lib/ubvu_session.py"
			],
			[
				"uv-test",
				"uv-test"
			],
			[
				"test_story_finder.py",
				"intelligence/test/test_story_finder.py"
			],
			[
				"api/test/mentions/test_search.py",
				"api/test/mentions/test_search.py"
			],
			[
				"ubvu_ses",
				"clients/semantria/lib/ubvu_session.py"
			],
			[
				"test_sema",
				"clients/test/test_semantria_api_client.py"
			],
			[
				"seman",
				"clients/semantria/semantria_api_client.py"
			],
			[
				"boards",
				"models/report/board_stats_helper.py"
			],
			[
				"celeryco",
				"core/celeryconfig_mongo.py"
			],
			[
				"instrument",
				"core/test/decorators/test_instrument_task.py"
			],
			[
				"ubvu-sta",
				"core/ubvu-staging.yml"
			],
			[
				"ubvu-pro",
				"core/ubvu-production.yml"
			],
			[
				"ubervusettings",
				"ubervu/settings.py"
			],
			[
				"ubvu",
				"core/ubvu-development.yml"
			],
			[
				"settings",
				"core/settings.py"
			],
			[
				"boards_s",
				"models/report/board_stats_helper.py"
			],
			[
				"ubvu-de",
				"core/ubvu-development.yml"
			],
			[
				"test_semantria_api_client",
				"clients/test/test_semantria_api_client.py"
			],
			[
				"backednyml",
				"uvscripts/tests_suite/backend_tests.yml"
			],
			[
				"fixturessemantri",
				"clients/test/fixtures/test_semantria_api_client.py"
			],
			[
				"testsemantria",
				"mentions/test/test_semantria_sentiment_detector.py"
			],
			[
				"testsemantri",
				"clients/test/fixtures/test_semantria_api_client.py"
			],
			[
				"mentionsbuffer",
				"mentions/lib/helpers/mentions_buffer.py"
			],
			[
				"clients/api",
				"clients/apikeys.py"
			],
			[
				"analytics/tagcloud/tasks.py",
				"analytics/tagcloud/tasks.py"
			],
			[
				"sessi",
				"clients/semantria/lib/session.py"
			],
			[
				"semantria_api_client.py",
				"clients/semantria/semantria_api_client.py"
			],
			[
				"tester.",
				"app/tests/qunit_tester.coffee"
			],
			[
				"basetest",
				"app/tests/base_test.coffee"
			],
			[
				"modules/mixpanel/module.coffee",
				"app/modules/mixpanel/module.coffee"
			],
			[
				"base_even",
				"app/modules/mixpanel/base_event.coffee"
			],
			[
				"mixpanel.co",
				"app/tests/misc/mixpanel_tests.coffee"
			],
			[
				"mixpanel",
				"app/docs/mixpanel.md"
			],
			[
				"testing.",
				"app/conf/environments/testing.json"
			],
			[
				"tipsmd",
				"docs/testing/lettuce_tips.md"
			],
			[
				"runhar",
				"ubervu/run_harvest.py"
			],
			[
				"hs_tes",
				"app/conf/environments/hs_testing.json"
			],
			[
				"devel",
				"app/conf/environments/development.json"
			],
			[
				"write-re",
				"grunt/tasks/write-require-config.coffee"
			],
			[
				"testing.js",
				"app/conf/environments/testing.json"
			],
			[
				"staging.",
				"app/conf/environments/staging.json"
			],
			[
				"gruntfi",
				"Gruntfile.coffee"
			],
			[
				"uvu-c",
				"app/conf/uvu-conf.json"
			],
			[
				"develo",
				"app/conf/environments/development.json"
			],
			[
				"staging",
				"app/conf/environments/staging.json"
			],
			[
				"terrain",
				"ubervu/terrain.py"
			],
			[
				"app/conf/envi/staging",
				"app/conf/environments/staging.json"
			],
			[
				"twitter_stream/hbc",
				"twitter_streaming/hbc/hbc-core/src/main/java/com/twitter/hbc/httpclient/auth/OAuth1.java"
			],
			[
				"creategen",
				"grunt/tasks/create_general_user_file.coffee"
			],
			[
				"prepare",
				"grunt/tasks/prepare-uglify-bundle-config.coffee"
			],
			[
				"test_mod",
				"app/conf/test_modules.json"
			],
			[
				"tester.js",
				"app/tester.js"
			],
			[
				"tester.ht",
				"app/tester.html"
			],
			[
				"qunit",
				"app/tests/qunit_tester.coffee"
			],
			[
				"general",
				"app/conf/general/general.dev.json"
			],
			[
				"aliascoffee",
				"grunt/tasks/prepend-requirejs-aliases.coffee"
			],
			[
				"uvu-co",
				"app/conf/uvu-conf.json"
			],
			[
				"test_modu",
				"app/conf/test_modules.json"
			],
			[
				"uvu-",
				"app/conf/uvu-conf.json"
			],
			[
				"api_mock",
				"app/core/api_mock.coffee"
			],
			[
				"core/libs/backbone/backbone_tests",
				"app/core/libs/backbone/backbone_tests.coffee"
			],
			[
				"jquerymo",
				"app/tests/libs/jquery.mockjax.js"
			],
			[
				"general.dev",
				"app/conf/general/general.dev.json"
			],
			[
				"general.de",
				"app/conf/general/general.dev.json"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
			[
				"dotf",
				"~/Projects/sublime_projects/dotfiles.sublime-project"
			],
			[
				"dotfi",
				"~/Projects/sublime_projects/dotfiles.sublime-project"
			],
			[
				"deploy",
				"~/Projects/sublime_projects/deploy.sublime-project"
			],
			[
				"dot",
				"~/Projects/sublime_projects/dotfiles.sublime-project"
			],
			[
				"pupp",
				"~/Projects/sublime_projects/puppet.sublime-project"
			],
			[
				"depl",
				"~/Projects/sublime_projects/deploy.sublime-project"
			],
			[
				"hole",
				"~/Projects/sublime_projects/thehole.sublime-project"
			],
			[
				"puppet",
				"~/Projects/sublime_projects/puppet.sublime-project"
			],
			[
				"p",
				"~/Projects/sublime_projects/puppet.sublime-project"
			],
			[
				"pupe",
				"~/Projects/sublime_projects/puppet.sublime-project"
			],
			[
				"pup",
				"~/Projects/sublime_projects/puppet.sublime-project"
			],
			[
				"pu",
				"~/Projects/sublime_projects/puppet.sublime-project"
			],
			[
				"dash",
				"~/Projects/sublime_projects/dashpalcu.sublime-project"
			],
			[
				"rsoc",
				"~/Projects/sublime_projects/rsoc.sublime-project"
			],
			[
				"",
				"~/Projects/sublime_projects/puppet.sublime-project"
			],
			[
				"deplo",
				"~/Projects/sublime_projects/deploy.sublime-project"
			],
			[
				"d",
				"~/Projects/sublime_projects/deploy.sublime-project"
			],
			[
				"dep",
				"~/Projects/sublime_projects/deploy.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 249.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
